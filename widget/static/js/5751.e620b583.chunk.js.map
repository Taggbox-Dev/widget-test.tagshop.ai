{"version":3,"file":"static/js/5751.e620b583.chunk.js","mappings":"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","sources":["app/Components/UserComponents/ReviewHub/Components/uppyUpload.js","app/Components/UserComponents/ReviewHub/Components/Uploads.js"],"sourcesContent":["import Uppy from '@uppy/core';\nimport Transloadit from '@uppy/transloadit';\nimport { suiteTrack, isTagShop } from '../../../../../actions/api';\n\nconst uppyKey = '0701d3d7f8d94e92a65a9cba388b1d96';\nconst uppyBucket = isTagShop ? 'cloud.tagshop.ai' : 'cloud.tagbox.com';\nconst uppyAwsKey = '47ABVORKG52UYE1KB28S';\nconst uppyAwsSecret = 'pcaTfeokaz28geAAns08H3yaGbOVz6ILgTptu19v';\n\n\n\n\nclass UppyUpload {\n    constructor(beforeFileAdded, beforeUpload, limit) {\n        let uploadPath = 'media/tmpimages/';\n        let bucket = uppyBucket;\n        if (suiteTrack) {\n            uploadPath = `ugc-suite/tmp/`;\n            bucket = 'cloud.tagbox.com';\n        }\n        if (isTagShop) {\n            uploadPath = `tmp/`;\n        }\n        this.uppy = new Uppy({\n            meta: { type: 'avatar' },\n            autoProceed: true,\n            debug: true,\n            allowMultipleUploads: true,\n            restrictions: {\n                maxFileSize: 104857600,\n                maxNumberOfFiles: limit ? limit : 1,\n                minNumberOfFiles: 1,\n                allowedFileTypes: ['image/*', 'video/*']\n            },\n            onBeforeFileAdded: beforeFileAdded,\n            onBeforeUpload: beforeUpload\n        })\n\n        this.uppy.use(Transloadit, {\n            params: {\n                auth: {\n                    key: uppyKey\n                },\n                steps: {\n                    store: {\n                        robot: '/wasabi/store',\n                        bucket_region: \"us-west-1\",\n                        result: true,\n                        bucket: bucket,\n                        key: uppyAwsKey,\n                        secret: uppyAwsSecret,\n                        path: uploadPath + '${file.id}.${file.ext}'\n                    }\n                }\n            },\n            waitForEncoding: true\n            // }).use(Compressor, {\n            //     quality: 0.8\n        });\n    }\n}\n\nexport default UppyUpload;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport { DragDrop, StatusBar, FileInput, Dashboard } from '@uppy/react';\nimport '@uppy/core/dist/style.css'\nimport UppyUpload from './uppyUpload'\nimport { suiteTrack, VIDEO_COMPRESS, isTagShop } from '../../../../../actions/api' \nimport { bytesToSize, tb_onsite_btn_disabled } from '../../../../../utils/Common';\nimport { CloudHostUrl } from '../../../../../constants'\nimport _ from \"lodash\";\n\n\nexport const Loader = ({ value, isBar }) => {\n    const progress = Math.round(3.14 * (78 / 2 - 10) * 2 * ((100 - value) / 100));\n    return isBar ?\n        <div className='t_m_pb_wrap'>\n            <div className='t_m_pb' style={{ width: `${value}%` }}><div></div></div>\n        </div>\n        :\n        <div className='t_m_propgress'>\n            <svg width=\"78\" height=\"78\" viewBox=\"-10 -10 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style={{ transform: 'rotate(-90deg)' }}>\n                <circle r=\"30\" cx=\"40\" cy=\"40\" fill=\"transparent\" stroke=\"#D9D9D9\" strokeWidth=\"4\" strokeDasharray=\"188.4px\" strokeDashoffset=\"0\"></circle>\n                <circle id='path_fr_circle' r=\"30\" cx=\"40\" cy=\"40\" stroke=\"#545454\" strokeWidth=\"4\" strokeLinecap=\"butt\" strokeDashoffset={`${progress}px`} fill=\"transparent\" strokeDasharray=\"188.4px\"></circle>\n                <text x=\"25px\" y=\"47px\" fill=\"#545454\" fontSize=\"14px\" style={{ transform: 'rotate(90deg) translate(17px, -84px)' }} textAnchor=\"middle\" dominantBaseline=\"middle\">{value}%</text>\n            </svg>\n        </div>\n}\n\nlet videoFiles = []\nlet totalFiles = []\nclass Uploads extends Component {\n    state = {\n        isLoading: false,\n        selectedFile: null,\n        selectedUrl: null,\n        type: null,\n        thumb_file: [],\n        fileSize: false,\n        filemaxSize: 0,\n        throwError: false,\n        videoPath: \"\",\n        fileSizeText: \"\",\n        ext: null, size: 0,\n        fileName: null,\n        mediaHeight: 0,\n        mediaWidth: 0,\n        uploadPercent: 0,\n        limit: 20,\n        uploadedFiles: []\n    }\n    beforeFileAdded = (currentFile, files) => {\n        if(totalFiles.length > 0) {\n            const exists = totalFiles.find(file => file.id == currentFile.id)\n            if(exists) return false\n        }\n        tb_onsite_btn_disabled(1)\n        const { size, sizeText } = bytesToSize(currentFile.size);\n        if (['GB', 'TB'].includes(sizeText)) {\n            const fileType = currentFile.meta.type.includes('image') ? 4 : 5;\n            this.setState({ type: fileType, fileSize: true, fileSizeText: `${size}${sizeText}` }, () => {\n                this.onLoadError(fileType)\n                setTimeout(() => this.setState({ fileSize: false, fileSizeText: \"\" }), 2000)\n            })\n            tb_onsite_btn_disabled(2)\n\n        }\n        else if (sizeText == \"MB\" ) {\n\n            const fileType = currentFile.meta.type.includes('image') ? 4 : 5;\n            const maxuploadSize = fileType == 4 ? 15 : 100;\n\n            if (size >= maxuploadSize) {\n\n                this.setState({ type: fileType, filemaxSize: maxuploadSize, fileSize: true, fileSizeText: `${size}${sizeText}` }, () => {\n                    this.onLoadError(fileType)\n                    setTimeout(() => this.setState({ fileSize: false, fileSizeText: \"\", type: null }, () => this.onLoadError(fileType)), 5000)\n                })\n                tb_onsite_btn_disabled(2)\n\n                return false\n            }\n            else if (fileType == 5){\n                \n                if(totalFiles.length <20){\n                    videoFiles.push(currentFile)\n                    totalFiles.push(currentFile)\n                }\n                \n            }\n            else {\n                if(totalFiles.length <20){\n                    totalFiles.push(currentFile)\n                }\n                //return true\n            }\n        }\n        else if(sizeText == 'KB' && currentFile.meta.type.includes('image') && totalFiles.length<20){\n            totalFiles.push(currentFile)\n            //return true\n        }\n    }\n\n    beforeUpload = (files) => {\n        for (const file of totalFiles) {\n            if (file.meta.type.includes('video')) {\n            this.videoProcess()\n              break;\n            }\n        }\n\n        this.setState({ isLoading: true })\n        return Object.fromEntries(\n            Object.entries(files).filter(([fileId, file]) => !file.meta.type.includes('video'))\n        );\n    }\n\n    videoProcess = () => {\n        if(videoFiles.length > 0 && totalFiles.length<=20) {\n            try {\n                const { onsite_token } = this.props;\n                this.setState({isLoading:true})\n                const updateFiles = videoFiles[0];\n                const data = new FormData();\n                data.append(\"file\", updateFiles.data);\n                data.append(\"onsite_token\", onsite_token);\n                const config = {\n                    headers: { productdomain: `taggbox.com` },\n                    onUploadProgress: (progressEvent) => {\n                        const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                        this.setState({\n                            uploadPercent: percent, isLoading:true\n                        })\n                        \n                        // Update Uppy progress manually\n                        \n                    }\n                };\n                axios.post(VIDEO_COMPRESS, data, config).then((response) => {\n                    const { responseData } = response.data;\n                    if (responseData && responseData.length > 0) {\n                        this.setState(prevState => ({\n                            videoPath: responseData[0].sscode,\n                            isLoading: false,\n                            type: 5,\n                            selectedFile: responseData[0].s3Url,\n                            selectedUrl: responseData[0].s3Url,\n                            thumb_file: responseData[0].s3ThumbUrl,\n                            ext: updateFiles.extension,\n                            size: updateFiles.size,\n                            fileName: updateFiles.name,\n                            mediaHeight: responseData[0].height,\n                            mediaWidth: responseData[0].width,\n                            uploadedFiles: [...prevState.uploadedFiles, {name:updateFiles.name, url:responseData[0].s3Url, id:updateFiles.id}]\n                        }), () => {\n                            this.onUpdateLocalState();\n                            videoFiles.shift()\n                            this.videoProcess()\n                        })\n                        tb_onsite_btn_disabled(2)\n                    }\n                }).catch((error) => {\n                    totalFiles = totalFiles.filter(file => file.id != updateFiles.id)\n                    this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\n                    tb_onsite_btn_disabled(2)\n                })\n            }\n            catch (ex) {\n                this.videoProcess()\n                this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\n                this.uppyUploader.uppy.reset()\n                tb_onsite_btn_disabled(2)\n            }\n        }\n        // else {\n\n        // }\n    }\n\n    uppyUploader = new UppyUpload(this.beforeFileAdded, this.beforeUpload, this.state.limit)\n\n    componentDidMount() {\n        this.uppyUploader.uppy.on('transloadit:result', (stepName, result) => {\n            this.setState({ isLoading: false })\n            const height = result.meta.orientation && result.meta.orientation == \"Rotate 90 CW\" ? result.meta.width : result.meta.height;\n            const width = result.meta.orientation && result.meta.orientation == \"Rotate 90 CW\" ? result.meta.height : result.meta.width;\n            let uploadPath = `${CloudHostUrl}media/tmpimages/`;\n            if (suiteTrack) uploadPath = `https://cloud.tagbox.com/ugc-suite/tmp/`;\n            if (isTagShop) uploadPath = `https://cloud.tagshop.ai/tmp/`;\n            this.setState(prevState=>({\n                type: result.mime.includes(\"video\") ? 5 : 4, selectedFile: result.id, selectedUrl: `${uploadPath}${result.id}.${result.ext}`, ext: result.ext, size: result.size, fileName: result.name, mediaHeight: height,\n                mediaWidth: width, uploadedFiles: [...prevState.uploadedFiles, {name:result.name, url:`${uploadPath}${result.id}.${result.ext}`, id:result.localId}]\n            }), () => this.onUpdateLocalState())\n            tb_onsite_btn_disabled(2)\n        })\n        this.uppyUploader.uppy.on('file-removed', (file, reason) => {\n            tb_onsite_btn_disabled(2)\n        })\n        this.uppyUploader.uppy.on('upload-progress', (file, progress) => {\n            this.setState({ uploadPercent: ((progress.bytesUploaded / progress.bytesTotal) * 100).toFixed() })\n        })\n        this.uppyUploader.uppy.on('upload-error', (file, error) => {\n            this.setState({\n                throwError: true\n            })\n        });\n        this.uppyUploader.uppy.on('upload-complete', (result, error) => {\n            this.onRemovedState(true)\n        });\n    }\n    onRemovedState = (isStatus) => {\n        const { type } = this.state\n        this.setState({\n            selectedFile: null,\n            selectedUrl: null,\n            type: null,\n            thumb_file: \"\",\n            fileSize: false,\n            fileSizeText: \"\",\n            videoPath: \"\",\n            ext: null, size: 0, fileName: null, mediaHeight: 0, mediaWidth: 0\n        }, () => {\n            this.onLoadError(type)\n            if (isStatus) this.uppyUploader.uppy.reset()\n        })\n    }\n\n    onUpdateLocalState = () => {\n        const { addPostImage, isActiveIndex } = this.props;\n        const { selectedUrl, type, thumb_file, videoPath, ext, size, fileName, mediaHeight, mediaWidth, uploadedFiles } = this.state;\n        addPostImage(selectedUrl, type === 5 ? thumb_file : selectedUrl, videoPath, type, isActiveIndex, ext, size, fileName, mediaHeight, mediaWidth)\n        if (type === 5) this.onRemovedState(false)\n    }\n\n    onLoadError = (type) => {\n        const { uploadErrorCallback } = this.props\n        const { fileSize, fileSizeText, filemaxSize, throwError } = this.state\n        const error = fileSize ? `File Size (${fileSizeText}) Limit Exceeded ${type == 4 ? 'Image' : 'Video'} Size : Max ${filemaxSize} MB` : ''\n        const error2 = throwError ? 'Something went wrong , Please try again.' : ''\n        uploadErrorCallback(error ? error : error2 ? error2 : '')\n    }\n\n    componentDidUpdate(prevProps){\n        const { removedFile } = this.props\n        const {uploadedFiles} = this.state\n        if(!_.isEqual(removedFile, prevProps.removedFile)){\n            if(totalFiles.length > 0) {\n                const checkFile =  uploadedFiles.find(file => file.url == removedFile.video)\n                if(checkFile && Object.keys(checkFile).length > 0){\n                    if(removedFile.type!=5) this.uppyUploader.uppy.reset()                        \n                    const fileToRemove = totalFiles.find(file => file.id == checkFile.id);\n                    if (fileToRemove) {\n                        totalFiles = totalFiles.filter(file => file.id !== fileToRemove.id);\n                    }\n                    this.setState(prevState => ({ uploadedFiles: prevState.uploadedFiles.filter(file => file.url !== removedFile.video)}))\n                }\n            } \n        }\n    }\n\n    render() {\n        const { isLoading, fileSize, throwError, fileSizeText, filemaxSize, type, uploadPercent, limit } = this.state;\n        const { upload_image } = this.props\n        return upload_image && upload_image.length < 20 ? <>\n            <div className={`t_m_upload ${upload_image && upload_image.length < 1 ? 't_m_dd' : ''}`}>\n                <div className='t_m_up_wrp'>\n                    {upload_image && upload_image.length < 1 ?\n                        <>\n                            <DragDrop\n                                note=\"Video Size : Max 100MB | Photo Size : Max 15MB | Max 20 Posts\"\n                                uppy={this.uppyUploader.uppy}\n                                inline={true}\n                                maxNumberOfFiles={limit}\n                                width={'100%'}\n                                height={'auto'}\n                                locale={{\n                                    strings: {\n                                        // Text to show on the droppable area.\n                                        // `% { browse }` is replaced with a link that opens the system file selection dialog.\n                                        dropHereOr: 'Drag a video / image to upload (optional)',\n                                        // Used as the label for the link that opens the system file selection dialog.\n                                        browse: '',\n                                    },\n                                }}\n                            />\n                            {isLoading ?\n                                <Loader value={uploadPercent} isBar={true} />\n                                : null}\n                        </>\n                        :\n                        isLoading ?\n                            <Loader value={uploadPercent} isBar={false} />\n                            :\n                            <>\n                                <FileInput\n                                    uppy={this.uppyUploader.uppy}\n                                    allowMultipleFiles={true}\n                                    locale={{\n                                        strings: {\n                                            // Text to show on the droppable area.\n                                            // `% { browse }` is replaced with a link that opens the system file selection dialog.\n                                            //dropHereOr: 'Drag a video / image to upload (optional)',\n                                            // Used as the label for the link that opens the system file selection dialog.\n                                            browse: 'browse',\n                                        },\n                                    }}\n                                />\n                                {/* <div className='t_m_p_ico'><div className={`tb__icon tb-close-thin tb-plus_icon`}><div></div></div></div> */}\n                            </>\n                    }\n                </div>\n            </div>\n        </> : null\n    }\n}\n\nexport default Uploads;"],"names":["uppyBucket","isTagShop","constructor","beforeFileAdded","beforeUpload","limit","uploadPath","bucket","suiteTrack","this","uppy","Uppy","meta","type","autoProceed","debug","allowMultipleUploads","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","onBeforeFileAdded","onBeforeUpload","use","Transloadit","params","auth","key","steps","store","robot","bucket_region","result","secret","path","waitForEncoding","Loader","_ref","value","isBar","progress","Math","round","_jsx","className","children","style","width","_jsxs","height","viewBox","version","xmlns","transform","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","id","strokeLinecap","x","y","fontSize","textAnchor","dominantBaseline","videoFiles","totalFiles","Uploads","Component","arguments","state","isLoading","selectedFile","selectedUrl","thumb_file","fileSize","filemaxSize","throwError","videoPath","fileSizeText","ext","size","fileName","mediaHeight","mediaWidth","uploadPercent","uploadedFiles","currentFile","files","length","find","file","tb_onsite_btn_disabled","sizeText","bytesToSize","includes","fileType","setState","onLoadError","setTimeout","maxuploadSize","push","videoProcess","Object","fromEntries","entries","filter","_ref2","fileId","onsite_token","props","updateFiles","data","FormData","append","config","headers","productdomain","onUploadProgress","progressEvent","percent","loaded","total","axios","VIDEO_COMPRESS","then","response","responseData","prevState","sscode","s3Url","s3ThumbUrl","extension","name","url","onUpdateLocalState","shift","catch","error","ex","uppyUploader","reset","UppyUpload","onRemovedState","isStatus","addPostImage","isActiveIndex","uploadErrorCallback","error2","componentDidMount","on","stepName","orientation","CloudHostUrl","mime","localId","reason","bytesUploaded","bytesTotal","toFixed","componentDidUpdate","prevProps","removedFile","_","checkFile","video","keys","fileToRemove","render","upload_image","_Fragment","DragDrop","note","inline","locale","strings","dropHereOr","browse","FileInput","allowMultipleFiles"],"sourceRoot":""}
{"version":3,"file":"static/js/9502.95d96374.chunk.js","mappings":"qNAMe,MAAMA,UAAoBC,EAAAA,cACvCC,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,WAAaC,EAAAA,WACpB,CACAC,iBAAAA,GACIC,YAAW,KAAO,IAADC,EAAAC,EACf,GAAmB,QAAnBD,EAAIL,KAAKC,kBAAU,IAAAI,GAAS,QAATC,EAAfD,EAAiBE,eAAO,IAAAD,GAAxBA,EAA0BE,aAAc,CAAC,IAADC,EAAAC,EAC1C,MAAMC,GAA+B,QAAfF,EAAAT,KAAKC,kBAAU,IAAAQ,GAAS,QAATC,EAAfD,EAAiBF,eAAO,IAAAG,OAAT,EAAfA,EAA0BF,eAAgB,EAC5DR,KAAKF,MAAMc,oBAAoBZ,KAAKF,MAAMc,mBAAmBD,EACnE,IACC,IACP,CAEAE,MAAAA,GACE,MAAM,UAAEC,EAAS,aAAEC,EAAY,QAAEC,EAAO,aAAEC,EAAY,SAAEC,EAAQ,WAAEC,GAAenB,KAAKF,MAChFsB,EAAYN,EAAUE,QAAQK,cAAgBC,EAAAA,GAAYR,EAAUE,QAAQK,YAAc,EAC1FE,EAAgB,CACpBC,gBAAiBN,EACjBO,UAAWX,EAAUY,MAAMD,WAEvBE,GAAcC,EAAAA,EAAAA,GAAsBZ,GAEpCa,EAAiB,GAAGd,KAAiBI,EAA2B,GADlD,IAAGC,EAAY,oBAAoBA,IAAc,kBACkBN,EAAUY,MAAMI,UACvG,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWH,EAAgBI,IAAKjC,KAAKC,WAAYyB,MAAOH,EAAcW,SAAA,CACxEjB,GAAekB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,UAAEE,EAAAA,EAAAA,IAAgBnB,KAAuB,MAEvFkB,EAAAA,EAAAA,KAACE,EAAAA,QAAoB,CAACrB,QAASW,EAAab,UAAWA,MAG7D,E,qFCjCF,MAAMuB,EAAuBC,IAA6B,IAA5B,QAAEtB,EAAO,UAAEF,GAAWwB,EAChD,MAAM,WAAEC,EAAU,iBAAEC,EAAgB,MAAEC,EAAK,YAAEC,EAAW,YAAEC,EAAW,WAAEC,IAAwB,OAAT9B,QAAS,IAATA,OAAS,EAATA,EAAW+B,UAAW,CAAC,EAEvGC,EAAqB,CACvBL,MAAOC,EAAcD,EAAQ,UAC7BM,WAAY,OACZC,gBAAiBR,EAAmBD,EAAa,cACjDU,QAAS,eACTC,OAAQ,SAGZ,OAAKlC,EAEG2B,GAAeC,EACnB5B,EAAQmC,MAAM,SAASC,KAAI,CAACC,EAAMC,IACtBD,EAAKE,WAAW,MAEZpB,EAAAA,EAAAA,KAAA,OAAiBH,UAAU,eAAeN,MAAOoB,EAAmBZ,SAC/DmB,GADKC,GAIPD,EAAKG,SAAS,MACdH,EAAKF,MAAM,MAAMC,KAAI,CAACK,EAAMC,EAAGC,KAClC5B,EAAAA,EAAAA,MAAC7B,EAAAA,SAAc,CAAAgC,SAAA,CACVuB,EACAC,EAAIC,EAAIC,OAAS,IAAKzB,EAAAA,EAAAA,KAAA,WAFN,GAAGmB,KAASI,QAM9BvB,EAAAA,EAAAA,KAACjC,EAAAA,SAAc,CAAAgC,SAAcmB,GAARC,MAIxClB,EAAAA,EAAAA,IAAgBpB,GAtBC,IAuBpB,EAGL,GAAe6C,EAAAA,EAAAA,MAAKxB,E","sources":["app/Themes/Elements/PostContent/PostContent.js","app/Themes/Elements/PostContent/PostContentHighlight.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\nimport ReactHtmlParser from 'react-html-parser'; \nimport { isTagShop } from \"../../../../actions/api\";\nimport { STRING_TO_URL_CONVERT } from \"../../../../utils/Common\";\nimport PostContentHighlight from \"./PostContentHighlight\";\n\nexport default class PostContent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.contentRef = React.createRef();\n  }\n  componentDidMount() {\n      setTimeout(() => {\n        if (this.contentRef?.current?.clientHeight) {\n          const contentHeight = this.contentRef?.current?.clientHeight || 0;\n          if (this.props.contentRefCallBack) this.props.contentRefCallBack(contentHeight)\n        }\n      }, 100);\n  }\n\n  render() {\n    const { CardStyle, contentClass, content, contentTitle, maxLines, isReadMore } = this.props;\n    const trimLines = CardStyle.content.trimcontent && !isTagShop ? CardStyle.content.trimcontent : 0;\n    const truncateStyle = {\n      WebkitLineClamp: maxLines,\n      textAlign: CardStyle.style.textAlign\n    };\n    const contentData = STRING_TO_URL_CONVERT(content);\n    const trimClasses = `${trimLines ? ` tb_content_line-${trimLines}` : ``}`\n    const contentClasses = `${contentClass} ${!isReadMore ? trimClasses : ''} tb-cTBfont-${CardStyle.style.variant}`\n    return (\n      <div className={contentClasses} ref={this.contentRef} style={truncateStyle}>\n        {contentTitle ? <div className=\"tb_bold_txt__\">{ReactHtmlParser(contentTitle)}</div> : null}\n        {/* {ReactHtmlParser(contentData)} */}\n        <PostContentHighlight content={contentData} CardStyle={CardStyle} />\n      </div>\n    );\n  }\n}\n","import React, { Fragment, memo } from \"react\";\nimport ReactHtmlParser from 'react-html-parser'; \nimport './content.scss'\n\nconst PostContentHighlight = ({ content, CardStyle }) => {\n    const { background, backgroundStatus, color, colorStatus, feedHashtag, allHashtag } = CardStyle?.hashtag || {};\n    \n    const customHashtagStyle = {\n        color: colorStatus ? color : 'inherit',\n        fontWeight: \"bold\",\n        backgroundColor: backgroundStatus ? background : 'transparent',\n        display: 'inline-block',\n        margin: '0 2px'\n    };\n\n    if (!content) return null;\n\n    return (feedHashtag || allHashtag) ? (\n        content.split(/(\\s+)/).map((word, index) => {\n                if (word.startsWith('#')) {\n                    return (\n                        <div key={index} className=\"tb_highlight\" style={customHashtagStyle}>\n                            {word}\n                        </div>\n                    );\n                } else if (word.includes('\\n')) {\n                    return word.split('\\n').map((part, i, arr) => (\n                        <React.Fragment key={`${index}-${i}`}>\n                            {part}\n                            {i < arr.length - 1 && <br />}\n                        </React.Fragment>\n                    ));\n                } else {\n                    return <React.Fragment key={index}>{word}</React.Fragment>;\n                }\n            })\n    ) : (\n        ReactHtmlParser(content)\n    );\n};\n\nexport default memo(PostContentHighlight);"],"names":["PostContent","PureComponent","constructor","props","super","this","contentRef","React","componentDidMount","setTimeout","_this$contentRef","_this$contentRef$curr","current","clientHeight","_this$contentRef2","_this$contentRef2$cur","contentHeight","contentRefCallBack","render","CardStyle","contentClass","content","contentTitle","maxLines","isReadMore","trimLines","trimcontent","isTagShop","truncateStyle","WebkitLineClamp","textAlign","style","contentData","STRING_TO_URL_CONVERT","contentClasses","variant","_jsxs","className","ref","children","_jsx","ReactHtmlParser","PostContentHighlight","_ref","background","backgroundStatus","color","colorStatus","feedHashtag","allHashtag","hashtag","customHashtagStyle","fontWeight","backgroundColor","display","margin","split","map","word","index","startsWith","includes","part","i","arr","length","memo"],"sourceRoot":""}
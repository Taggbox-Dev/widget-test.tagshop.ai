{"version":3,"file":"static/js/4386.56bdc378.chunk.js","mappings":"mKACO,MAAMA,EAAqBA,CAACC,EAAWC,EAAQC,EAAOC,EAAOC,KAC7D,IACO,MAAMC,EAAeC,EAAgBC,EAAiBN,IAAW,IAC3DO,EAAWF,EAAgBC,EAAiBL,IAAU,IAI5D,MAAO,CAAEO,WAHoB,IAAVN,GACTH,EAAYK,EAAyB,GAAVD,IAAyB,GAARD,GAC7CH,EAAYK,EAAe,MAAkB,GAAVD,EACvBC,eAAcG,WAC1C,CAAE,MACK,MAAO,CAAEC,WAAY,EAAGJ,aAAc,EAAGG,SAAU,EAC1D,GAGMD,EAAoBG,IAC1B,IACO,IAA+C,IAA3CC,UAAUC,UAAUC,QAAQ,UAAkB,CAC3C,IACIC,EADW,IAAIC,KAAKL,GACCM,MAAM,WAC1BC,EAAMC,EAAOC,EAAKC,EAAMC,EAAQC,GAAUR,EAAUS,IAAIC,QAC7D,OAAO,IAAIT,KAAKE,EAAMC,EAAQ,EAAGC,EAAKC,EAAMC,EAAQC,EAC3D,CACO,OAAO,IAAIP,KAAKL,EAE9B,CACA,MAAOe,GACA,OAAO,IAAIV,KAAKL,EACvB,GAIMJ,EAAmBI,GAASA,EAAKgB,UACjCC,EAAsBA,CAACC,EAAkBC,IAAaC,YAAYF,EAAkBC,GACpFE,EAAeA,IAAMC,MAAe,EACpCC,EAAWC,OAAOC,OAASD,OAAOE,IAEzCJ,EAAYA,IAAwB,qBAAXE,QAA8C,qBAAbG,SACnDC,EAAWJ,OAAOK,SAASC,KAAKC,SAAS,W,gGChCtD,MAkCA,EAlCmBC,KACf,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GAuBrC,OANAC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAgBC,YAAW,IAAMJ,GAAU,IAAQ,KACzD,MAAO,KACHK,aAAaF,EAAc,CAC9B,GACF,KAEEJ,IAAWO,EAAAA,EAAAA,OAAmBZ,EAAAA,IAAaL,EAAAA,MAAYF,EAAAA,EAAAA,MAKpD,MAJAoB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAaC,QAvBVC,IACtBA,EAAMC,iBACN,MAAMC,EAAOnB,SAASoB,gBAClBD,EAAKE,kBACLF,EAAKE,oBACEF,EAAKG,qBACZH,EAAKG,uBACEH,EAAKI,wBACZJ,EAAKI,0BACEJ,EAAKK,qBACZL,EAAKK,sBAETjB,GAAU,EAAM,EAW0CkB,SAAA,EAClDC,EAAAA,EAAAA,KAAA,OAAKX,UAAU,qBAAoBU,UAACC,EAAAA,EAAAA,KAAA,YAAiB,uBAGrD,C","sources":["utils/display.js","app/Components/Fullscreen/index.js"],"sourcesContent":["\r\nexport const announcementsUtils = (timeStamp, showAt, endAt, every, anncKey) => {\r\n       try {\r\n              const timeInterval = getTimeFromDate(getConvertToDate(showAt)) / 1000;\r\n              const aEndTime = getTimeFromDate(getConvertToDate(endAt)) / 1000;\r\n              const repeatOnce = every !== 0\r\n                     ? (timeStamp - timeInterval + anncKey * 10) % (every * 60)\r\n                     : timeStamp - timeInterval - 23400 + anncKey * 10;\r\n              return { repeatOnce, timeInterval, aEndTime };\r\n       } catch {\r\n              return { repeatOnce: 0, timeInterval: 0, aEndTime: 0 };\r\n       }\r\n};\r\n\r\nexport const getConvertToDate = (date) => {\r\n       try {\r\n              if (navigator.userAgent.indexOf(\"Safari\") !== -1) {\r\n                     let dateData = new Date(date);\r\n                     let dateParts = dateData.split(/[- :T]/);\r\n                     let [year, month, day, hour, minute, second] = dateParts.map(Number);\r\n                     return new Date(year, month - 1, day, hour, minute, second);\r\n              } else {\r\n                     return new Date(date);\r\n              }\r\n       }\r\n       catch (ex) {\r\n              return new Date(date);\r\n       }\r\n}\r\n\r\n\r\nexport const getTimeFromDate = (date) => date.getTime();\r\nexport const setIntervalFunction = (intervalFunction, duration) => setInterval(intervalFunction, duration);\r\nexport const isFullScreen = () => isBrowser() || false;\r\nexport const isIframe = window.self !== window.top;\r\n\r\nconst isBrowser = () => typeof window !== 'undefined' && typeof document !== 'undefined';\r\nexport const isStudio = window.location.href.includes('studio=1')\r\n\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { detectMobile  } from \"../../../utils\";\r\nimport { isIframe, isFullScreen, isStudio } from \"../../../utils/display\";\r\nimport \"./FullScreenBtn.scss\"; \r\n\r\nconst Fullscreen = () => {\r\n    const [isShow, setIsShow] = useState(true);\r\n\r\n    const enableFullScreen = (event) => {\r\n        event.preventDefault();\r\n        const elem = document.documentElement;\r\n        if (elem.requestFullscreen) {\r\n            elem.requestFullscreen();\r\n        } else if (elem.mozRequestFullScreen) {\r\n            elem.mozRequestFullScreen();\r\n        } else if (elem.webkitRequestFullscreen) {\r\n            elem.webkitRequestFullscreen();\r\n        } else if (elem.msRequestFullscreen) {\r\n            elem.msRequestFullscreen();\r\n        }\r\n        setIsShow(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const screenTimeOut = setTimeout(() => setIsShow(false), 8000);\r\n        return () => {\r\n            clearTimeout(screenTimeOut);\r\n        };\r\n    }, []);\r\n    return (\r\n        (isShow && !detectMobile() && !isStudio && !isIframe && isFullScreen()) ? (\r\n            <div className=\"tb_f_s_btn\" onClick={enableFullScreen}>\r\n                <div className=\"tb__icon tb-expand\"><div></div></div>\r\n                Enable Full Screen\r\n            </div>\r\n        ) : null\r\n    );\r\n};\r\n\r\nexport default Fullscreen;"],"names":["announcementsUtils","timeStamp","showAt","endAt","every","anncKey","timeInterval","getTimeFromDate","getConvertToDate","aEndTime","repeatOnce","date","navigator","userAgent","indexOf","dateParts","Date","split","year","month","day","hour","minute","second","map","Number","ex","getTime","setIntervalFunction","intervalFunction","duration","setInterval","isFullScreen","isBrowser","isIframe","window","self","top","document","isStudio","location","href","includes","Fullscreen","isShow","setIsShow","useState","useEffect","screenTimeOut","setTimeout","clearTimeout","detectMobile","_jsxs","className","onClick","event","preventDefault","elem","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","children","_jsx"],"sourceRoot":""}
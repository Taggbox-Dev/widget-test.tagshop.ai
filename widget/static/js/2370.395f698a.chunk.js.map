{"version":3,"file":"static/js/2370.395f698a.chunk.js","mappings":"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","sources":["app/Components/Announcements/index.js","utils/display.js"],"sourcesContent":["import React, { Component, memo } from 'react';\nimport { setIntervalFunction, announcementsUtils } from '../../../utils/display'\nimport { CloudHostUrl } from '../../../constants';\nimport './scss/announcements.scss'\nclass Announcements extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            anmtData: null,\n            anmtDataKeys: null,\n            timeStamp: Math.floor(Date.now() / 1000),\n            imageError: false,\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight,\n        };\n    }\n\n    componentDidMount() {\n        this.onLoadAnmt()\n    }\n\n    timeInterval = null\n    onLoadAnmt = () => {\n        const { announcements } = this.props;\n        let anmtData = announcements;\n        let anmtDataKeys = Object.keys(anmtData).map(itemKey => anmtData[itemKey])\n        this.setState({ anmtData, anmtDataKeys, timeStamp: Math.floor(Date.now() / 1000), imageError: false }, () => this.AnmtInterval())\n    }\n\n    AnmtInterval = () => {\n        if (this.timeInterval) clearInterval(this.timeInterval)\n        const { anmtDataKeys, anmtData } = this.state;\n        if (anmtDataKeys != null && anmtData != null) this.timeInterval = setIntervalFunction(() => this.onLoadAnmt(), 10000)\n    }\n\n    render() {\n        const { anmtDataKeys, timeStamp, imageError, windowHeight, windowWidth } = this.state;\n        const lineClamp = windowWidth > windowHeight ? ((windowHeight - 400) / 50).toFixed() : (((windowHeight / 2) - 200) / 50).toFixed()\n        return <>{\n            anmtDataKeys !== null ? anmtDataKeys.map((item, index) => {\n                const { repeatOnce, timeInterval, aEndTime } = announcementsUtils(timeStamp, item.showAt, item.endAt, item.every, index);\n                if ((((repeatOnce === 0) || (repeatOnce < 10 && repeatOnce >= 0)) && (timeStamp >= timeInterval)) && timeStamp >= aEndTime) {\n                    let mediaFile = `${item.mediaFile}`;\n                    if (item.mediaFile.includes(CloudHostUrl)) mediaFile = item.mediaFile;\n                    const isMediaFile = !imageError && item.mediaFile != \"\" ? true : false;\n                    const onlyMedia = isMediaFile && (![1,4].includes(item.type)) ? true : false\n                    var lineClamp_ =  onlyMedia ? lineClamp : lineClamp * 2\n                    return <div key={index} id='announcement__' className='an_container'>\n                        <div className=\"an_overlay_\" style={{ backgroundImage: `url(${mediaFile})` }}></div>\n                        <div className=\"an_wrap\">\n                            <div className={`an_wrap_row ${onlyMedia? ' an_only_media' : ' an_only_text'}`}>\n                                {isMediaFile ?\n                                    <div className=\"an_media_\">\n                                        <img className=\"an_img_\" src={mediaFile} onError={() => this.setState({ imageError: true })}\n                                        //  height={800} width={1000} \n                                        alt=\"\" />\n                                    </div>\n                                    : null}\n                                {([1,4].includes(item.type)) ?\n                                    <div className=\"an_content_wrap\" ref={this.contentRef}>\n                                        <div className=\"an_content_in\">\n                                            <div className={`an_content an_con_line-${lineClamp_}`}>{item.description}</div>\n                                        </div>\n                                    </div>\n                                    : null}\n                            </div>\n                        </div>\n                    </div>\n                }\n                else return null;\n            }) : null}\n        </>\n    }\n}\n\nexport default memo(Announcements)","\nexport const announcementsUtils = (timeStamp, showAt, endAt, every, anncKey) => {\n       try {\n              const timeInterval = getTimeFromDate(getConvertToDate(showAt)) / 1000;\n              const aEndTime = getTimeFromDate(getConvertToDate(endAt)) / 1000;\n              const repeatOnce = every !== 0\n                     ? (timeStamp - timeInterval + anncKey * 10) % (every * 60)\n                     : timeStamp - timeInterval - 23400 + anncKey * 10;\n              return { repeatOnce, timeInterval, aEndTime };\n       } catch {\n              return { repeatOnce: 0, timeInterval: 0, aEndTime: 0 };\n       }\n};\n\nexport const getConvertToDate = (date) => {\n       try {\n              if (navigator.userAgent.indexOf(\"Safari\") !== -1) {\n                     let dateData = new Date(date);\n                     let dateParts = dateData.split(/[- :T]/);\n                     let [year, month, day, hour, minute, second] = dateParts.map(Number);\n                     return new Date(year, month - 1, day, hour, minute, second);\n              } else {\n                     return new Date(date);\n              }\n       }\n       catch (ex) {\n              return new Date(date);\n       }\n}\n\n\nexport const getTimeFromDate = (date) => date.getTime();\nexport const setIntervalFunction = (intervalFunction, duration) => setInterval(intervalFunction, duration);\nexport const isFullScreen = () => isBrowser() || false;\nexport const isIframe = window.self !== window.top;\n\nconst isBrowser = () => typeof window !== 'undefined' && typeof document !== 'undefined';\nexport const isStudio = window.location.href.includes('studio=1')\n\n\n"],"names":["Announcements","Component","constructor","props","super","timeInterval","onLoadAnmt","announcements","this","anmtData","anmtDataKeys","Object","keys","map","itemKey","setState","timeStamp","Math","floor","Date","now","imageError","AnmtInterval","clearInterval","state","setIntervalFunction","windowWidth","window","innerWidth","windowHeight","innerHeight","componentDidMount","render","lineClamp","toFixed","_jsx","_Fragment","children","item","index","repeatOnce","aEndTime","announcementsUtils","showAt","endAt","every","mediaFile","includes","CloudHostUrl","isMediaFile","onlyMedia","type","lineClamp_","_jsxs","id","className","style","backgroundImage","src","onError","alt","ref","contentRef","description","memo","anncKey","getTimeFromDate","getConvertToDate","date","navigator","userAgent","indexOf","dateParts","split","year","month","day","hour","minute","second","Number","ex","getTime","intervalFunction","duration","setInterval","isFullScreen","isBrowser","isIframe","self","top","document","isStudio","location","href"],"sourceRoot":""}
{"version":3,"file":"static/js/2230.c6378dbe.chunk.js","mappings":"gLAGA,MAAMA,EAAcC,EAAAA,MAAW,IAAM,kCAC/BC,EAAcD,EAAAA,MAAW,IAAM,kCAC/BE,EAAcF,EAAAA,MAAW,IAAM,iCAC/BG,EAAcH,EAAAA,MAAW,IAAM,kCAC/BI,EAAmBJ,EAAAA,MAAW,IAAM,iCAGpCK,EAAeC,IAAiB,IAAhB,OAAEC,GAAQD,EAC9B,OAAQC,EAAOC,YACb,KAAK,EACH,OAAOC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAAMC,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAACb,EAAW,CAACQ,OAAQA,OAC1D,KAAK,EACH,OAAOE,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAAMC,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAACX,EAAW,CAACM,OAAQA,OAC1D,KAAK,EACH,OAAOE,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAAMC,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAACV,EAAW,CAACK,OAAQA,OAC1D,KAAK,EACH,OAAOE,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAAMC,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAACT,EAAW,CAACI,OAAQA,OAC1D,QACE,OAAOK,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IACX,EAEa,MAAME,UAAeC,EAAAA,cAClCC,MAAAA,GACE,MAAM,OAAEV,EAAM,YAAEW,GAAgBC,KAAKC,MAKrC,OAJIb,EAAOc,mBAAqBd,EAAOc,kBAAkBC,SAASC,EAAAA,MAAehB,EAA0B,kBAAIiB,OAAOjB,EAAOc,mBAAmBI,QAAQC,EAAAA,GAAc,KAClKnB,EAAOoB,WAAapB,EAAOoB,UAAUL,SAASC,EAAAA,MAAehB,EAAkB,UAAIiB,OAAOjB,EAAOoB,WAAWF,QAAQC,EAAAA,GAAc,KAClIR,EAAYU,OAASV,EAAYU,MAAMN,SAASC,EAAAA,MAAeL,EAAmB,MAAIM,OAAON,EAAYU,OAAOH,QAAQC,EAAAA,GAAc,MAGxIjB,EAAAA,EAAAA,MAAA,OAAKoB,UAAU,mBAAkBf,SAAA,CACZ,IAAlBP,EAAOuB,QAAelB,EAAAA,EAAAA,KAACP,EAAY,CAACE,OAAQA,IAAa,GAClC,IAAvBW,EAAYY,QAAsC,KAAtBZ,EAAYU,OAA6D,KAA7CV,EAAYU,MAAMG,MAAML,EAAAA,IAAc,IAAYjB,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAAMC,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAACR,EAAgB,CAAC4B,SAAUd,EAAYU,WAAuB,KAG5M,E","sources":["app/Header/index.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\nimport \"./scss/Header.scss\";\nimport { CloudHostUrl, TagboxUpload } from '../../constants'\nconst HeaderType2 = React.lazy(() => import(\"./HeaderType/HeaderType2\"));\nconst HeaderType3 = React.lazy(() => import(\"./HeaderType/HeaderType3\"));\nconst HeaderType4 = React.lazy(() => import(\"./HeaderType/HeaderType4\"));\nconst HeaderType5 = React.lazy(() => import(\"./HeaderType/HeaderType5\"));\nconst HeaderTypeCustom = React.lazy(() => import('./HeaderType/HeaderTypeCustom'));\n\n\nconst HeaderRender = ({ Banner }) => {\n  switch (Banner.bannerType) {\n    case 2:\n      return <Suspense fallback={<></>}> <HeaderType2 Banner={Banner} /></Suspense>\n    case 3:\n      return <Suspense fallback={<></>}> <HeaderType3 Banner={Banner} /></Suspense>\n    case 4:\n      return <Suspense fallback={<></>}> <HeaderType4 Banner={Banner} /></Suspense>\n    case 5:\n      return <Suspense fallback={<></>}> <HeaderType5 Banner={Banner} /></Suspense>\n    default:\n      return <></>\n  }\n}\nexport default class Header extends PureComponent {\n  render() {\n    const { Banner, BannerImage } = this.props;\n    if (Banner.CustomBannerImage && Banner.CustomBannerImage.includes(CloudHostUrl)) Banner['CustomBannerImage'] = String(Banner.CustomBannerImage).replace(TagboxUpload, \"\");\n    if (Banner.LogoImage && Banner.LogoImage.includes(CloudHostUrl)) Banner['LogoImage'] = String(Banner.LogoImage).replace(TagboxUpload, \"\");\n    if (BannerImage.image && BannerImage.image.includes(CloudHostUrl)) BannerImage['image'] = String(BannerImage.image).replace(TagboxUpload, \"\");\n\n    return (\n      <div className=\"tb_wall_header__\">\n        {Banner.status === 1 ? <HeaderRender Banner={Banner} /> : ''}\n        {BannerImage.status === 1 && BannerImage.image !== '' && BannerImage.image.split(TagboxUpload)[1] !== '' ? <Suspense fallback={<></>}> <HeaderTypeCustom ImageUrl={BannerImage.image} /></Suspense> : ''}\n      </div>\n    );\n  }\n}\n"],"names":["HeaderType2","React","HeaderType3","HeaderType4","HeaderType5","HeaderTypeCustom","HeaderRender","_ref","Banner","bannerType","_jsxs","Suspense","fallback","_jsx","_Fragment","children","Header","PureComponent","render","BannerImage","this","props","CustomBannerImage","includes","CloudHostUrl","String","replace","TagboxUpload","LogoImage","image","className","status","split","ImageUrl"],"sourceRoot":""}
{"version":3,"file":"static/js/8962.0bddf872.chunk.js","mappings":"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","sources":["app/Themes/Elements/CTA/CtaButton.js","app/Themes/HighlightTheme/Elements/Media.js","app/Themes/HighlightTheme/Elements/Card.js","app/Themes/HighlightTheme/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nclass CTAButton extends PureComponent {\n  render() {\n    const { cta, ctaClass, postCta, onClickToCTA, item } = this.props;\n    const postCtaStatus = postCta && postCta.status === 1 ? true : false\n    const ctaStyle = {\n      color: postCtaStatus ? postCta.color : cta.color,\n      backgroundColor: postCtaStatus ? postCta.background : cta.background\n    }\n\n    return <div className={ctaClass} style={ctaStyle} role=\"button\" tabIndex=\"0\" aria-label=\"CTA Button\"\n      onClick={\n        (e) => {\n          e.stopPropagation();\n          onClickToCTA(item)\n          window.open(\n            `${postCtaStatus ? postCta.url : cta.url}`,\n            '_blank')\n        }}\n    > {postCtaStatus ? postCta.text : cta.text}</div>\n  }\n}\n\n\nexport default (CTAButton);","import Image from \"../../Elements/Media/Image\";\nimport Video from \"../../Elements/Media/Video\";\nimport MediaIcon from \"../../Elements/MediaIcon/MediaIcon\";\nimport { isTagEmbed, isTagShop } from \"../../../../actions/api\";\nconst Media = ({ itemData, wall, wallID, themeID, ownerId, ThemeRule }) => {\n  const size = isTagEmbed || wall.User.userDatabaseType == \"tagembed\" ? ThemeRule.aspectImageRatio ? ThemeRule.aspectImageRatio : 100 : 100\n  const isVideo = (itemData.type === 3 || itemData.type === 5) && (wall.ThemeRule.autoPlay == 1) ? true : false\n  return <div className=\"tb_ht_media_wrap\" role=\"button\" tabindex=\"0\" aria-label=\"Pop Up Button\">\n    <MediaIcon itemData={itemData} IconClass=\"tb_ht_media_icon\" show={isTagEmbed} isCenter={false} />\n    {isVideo ? <Video VideoClass=\"tb_ht_video\" data={itemData} wallID={wallID} themeID={wall.Personalization.widgetTheme} ownerId={ownerId} size={isTagEmbed ? size : 100} isCover={true} muted={true} autoPlay={true} />\n      : <Image ImageClass=\"tb_ht_image\" data={itemData} wallID={wallID} themeID={themeID} ownerId={ownerId} size={size} hotspot={false} />}\n  </div>\n}\nexport default Media","import { useEffect, useRef } from 'react'\nimport { themeImpressionTracking } from '../../../../utils'\nimport Media from \"./Media\";\nimport Network from \"../../Elements/Network/Network\";\nimport ShopButton from \"../../Elements/ShopButton/ShopButton\";\nimport { isTagEmbed, isTagShop, isTagbox } from \"../../../../actions/api\";\nimport CTAButton from \"../../Elements/CTA/CtaButton\";\nconst Card = ({ itemData, personalization, ThemeRule, wallID, ownerId, onClickToCTA, clickToShowPopUp, itemIndex, adjustWidth, wall, onClickPopUpSlider }) => {\n  const isMerge = personalization.widgetTheme == 81 ? false : true\n\n  const postTrack = useRef(null);\n  const themeMode = (ThemeRule.postHover == 0 && isTagShop) ? 'light' : 'dark'\n  const overlay = isTagbox ? 'tb_ht_color_overlay' : 'tb_ht_post_overlay-' + themeMode\n  const overlayStyle = { backgroundColor: isTagbox ? ThemeRule.cardColor : '' }\n  const cardSize = { padding: personalization.padding / 2 };\n  const mediaType = itemData.type !== 1 ? true : false;\n  const ctaStatus = (itemData.cta && Object.keys(itemData.cta).length > 0 && itemData.cta.status) ? isTagEmbed ? true : !(isMerge && isTagbox) ? true : false : false;\n  const cardRadius = (isMerge && isTagbox) ? '50%' : null;\n  const isShopBtn = isTagShop && itemData.ugc_products.length > 0 ? true : false;\n\n  const isProduct = isTagShop && itemData.ugc_products && itemData.ugc_products.length > 0 ? true : false\n  const isShopIcon = isTagShop && (isProduct && itemData.hotspot === 0) ? true : false\n  const isHotspot = isTagShop && itemData.hotspot && isProduct ? true : false\n\n  useEffect(() => {\n    if (isTagShop) themeImpressionTracking(postTrack);\n  }, []);\n  useEffect(() => {\n    if (itemData.isPopUp) onClickPopUpSlider(itemIndex, itemData)\n  }, [itemIndex, itemData.isPopUp, itemData]);\n  return <div id={`tb-ht-post-${itemData.id}`} className=\"tb_ht_post_wrapper\" style={cardSize} tb-network={itemData.network.id} tb-product={isShopIcon ? 1 : isHotspot ? 2 : 0} ref={postTrack} post-id={itemData.referenceId ? itemData.referenceId : itemData.id} feed-id={itemData.feedId} area-label={itemData.content} role=\"article\">\n    <div className=\"tb_ht_post_in\" onClick={clickToShowPopUp(itemIndex, itemData)} style={{ borderRadius: cardRadius }} role=\"button\" aria-roledescription=\"Click to open pop up\" tabIndex={\"0\"}>\n      <div className=\"tb_ht_post_media_wrapp\" role=\"button\" tabindex=\"0\" aria-label=\"Pop Up Button\">\n        {mediaType ? <Media itemData={itemData} wallID={wallID} themeID={personalization.widgetTheme} ownerId={ownerId} ThemeRule={ThemeRule} wall={wall} /> : ''}\n\n        <div className=\"tb_ht_post_details\">\n          <div className=\"tb_ht_social_\">\n            <Network networkClass={'tb_ht_social_ico_'} network={itemData.network} ThemeRule={ThemeRule} isDefault={ThemeRule.iconType === 1 ? true : false} Personalization={personalization} />\n          </div>\n          {isShopBtn ? <ShopButton ThemeRule={ThemeRule} btnClass={'tb_ht_btn_wrap'} /> : null}\n          {ctaStatus ? <div className=\"tb_ht_post_cta\" onClick={(e) => { e.stopPropagation() }}><CTAButton ctaClass={'tb_ht_post_cta_btn'} cta={itemData.cta} item={itemData} onClickToCTA={onClickToCTA} /> </div> : ''}\n        </div>\n        <div className={`tb_ht_post_overlay ${overlay}`} style={overlayStyle}><div></div></div>\n      </div>\n    </div>\n  </div>\n}\nexport default Card ","import React, { Component, memo } from \"react\";\nimport { isTagEmbed } from \"../../../actions/api\";\nimport { connect } from \"react-redux\";\nimport { Splide, SplideSlide, SplideTrack } from '@splidejs/react-splide';\nimport { getDataNextSteps } from '../../../actions/themeActions'\nimport { Grid } from '@splidejs/splide-extension-grid';\nimport Card from \"./Elements/Card\";\nimport \"./scss/HighlightTheme.scss\";\nimport '../scss/ThemesSplide.scss'\nimport { isTagShop } from '../../../actions/api'\n\nclass HighlightTheme extends Component {\n  constructor(props) {\n    super(props)\n    // this.secondaryRef = React.createRef();\n    this.inputRefs = {};\n  }\n  requestData = () => {\n    const { appendData, wall, preRender, hasMoreData, getDataNextSteps } = this.props;\n    if (hasMoreData) {\n      getDataNextSteps(\n        wall.Wall.id,\n        Math.floor(Date.now() / 1000),\n        wall.ThemeRule.numberOfPosts,\n        appendData.networkID,\n        appendData.after,\n        preRender,\n        appendData.heightEvent\n      );\n    }\n  };\n  componentDidMount() {\n    setTimeout(() => {\n      const classNameRole = document.querySelectorAll('.splide__slide');\n      classNameRole.forEach((element, index) => {\n        element.removeAttribute(\"role\");\n      });\n    }, 100);\n  }\n  componentDidUpdate() {\n    const value = Object.values(this.inputRefs)[0];\n    const { postData, completeDataObject, onClickPopUpSlider, wall, parentID } = this.props;\n    const rowCount = wall.ThemeRule.multiRow;\n    if (value && Object.values(value)[5].length > 0) {\n      let data = Object.values(value)[5]\n      data.map((item, itemIndex) => {\n        if (item.classList) {\n          const filterID = String(item.classList.value).split(\" \").filter((fCheck) => String(fCheck).includes(\"tb_\"))\n          var getID = filterID[0]\n          if (String(filterID[0]).includes(\"tb_\")) {\n            getID = String(filterID[0]).replace(\"tb_\", \"\")\n          }\n          const findIndex = postData.findIndex((find) => find == getID)\n          let clickD = document.querySelectorAll(`#${item.id}`)\n          for (let index = 0; index < clickD.length; index++) {\n            let clickDD = clickD[index];\n            let p_id = clickDD.getAttribute('p_id')\n            if (String(parentID) === String(p_id)) {\n              clickDD.addEventListener('click', event => {\n                event.preventDefault();\n                const itemData = completeDataObject[getID]\n                onClickPopUpSlider(findIndex, itemData)\n              });\n            }\n          }\n        }\n      })\n    }\n    else if (rowCount == 2) {\n      let data = Object.values(value)[5]\n      data.map((item, itemIndex) => {\n        if (item && item.childNodes.length > 0) {\n          item.childNodes.forEach((childItem) => {\n            if (childItem && childItem.childNodes.length > 0) {\n              childItem.childNodes.forEach((subChildItem) => {\n                if (subChildItem.classList) {\n                  const filterID = String(subChildItem.classList.value).split(\" \").filter((fCheck) => String(fCheck).includes(\"tb_\"))\n                  var getID = filterID[0]\n                  if (String(filterID[0]).includes(\"tb_\")) {\n                    getID = String(filterID[0]).replace(\"tb_\", \"\")\n                  }\n                  const findIndex = postData.findIndex((find) => find == getID)\n                  // console.log(\"subChildItem.id\", subChildItem);\n                  let clickD = document.querySelectorAll(`.tb_hs_post_container #${subChildItem.id}`)\n                  // console.log('clickD:', clickD);\n                  for (let index = 0; index < clickD.length; index++) {\n                    let clickDD = clickD[index];\n                    let p_id = clickDD.getAttribute('p_id')\n                    // console.log('p_id:,parentID ', p_id, parentID);\n                    if (String(parentID) === String(p_id)) {\n                      clickDD.addEventListener('click', event => {\n                        event.preventDefault();\n                        // console.log(\"from__clickDD==> parentID, clickD\", parentID, clickDD)\n                        const itemData = completeDataObject[getID]\n                        // console.log('findIndex, itemData', findIndex, itemData);\n                        onClickPopUpSlider(findIndex, itemData)\n                      });\n                    }\n                  }\n                }\n              })\n            }\n          });\n\n\n        }\n\n      })\n    }\n  }\n  onUpdateData = event => {\n\n  }\n\n  autoScrollSlider = (splide, prev, next, destIndex) => {\n    const { wall } = this.props;\n    const isTagembedStatus = isTagEmbed || wall.User.userDatabaseType == \"tagembed\"\n    const currentIndex = isTagembedStatus ? (splide[\"_o\"].perPage + splide.index) : splide.index\n    const slideLength = splide.length\n    const permove = isTagembedStatus ? 1 : splide[\"_o\"].perPage\n    if (slideLength - currentIndex === permove) this.requestData()\n  }\n  render() {\n    const { postData, completeDataObject, wall, clickToShowPopUp, onClickToCTA, parentID, adjustWidth, cardNumber, onClickPopUpSlider } = this.props;\n\n    const isTagembedStatus = isTagEmbed || wall.User.userDatabaseType == \"tagembed\"\n    const inputName = parentID;\n    const numberOfCoumn = wall.ThemeRule.numberOfCoumn;\n    const mobileColumn = wall.ThemeRule.mobileColumn;\n    const slidePost = wall.ThemeRule.slidePost;\n    const slideDuration = wall.ThemeRule.slideDuration;\n    const autoScrollStatus = wall.Personalization.autoScrollStatus;\n    const rowCount = isTagembedStatus ? wall.ThemeRule.multiRow : 1;\n    const cloneStatus = isTagembedStatus && wall.Personalization?.clonePost !== undefined ? wall.Personalization.clonePost === 0 ? { clones: 0 } : {} : {};\n    const isType = autoScrollStatus != 1 ? Object.keys(cloneStatus).length > 0 ? false : (isTagembedStatus ? 'slide' : 'loop') : (isTagembedStatus ? 'slide' : 'loop')\n    const settings = {\n      ...cloneStatus,\n      grid: {\n        rows: rowCount,\n      },\n      type: autoScrollStatus === 1 ? false : isType,\n      rewind: isTagembedStatus ? true : false,\n      rewindSpeed: 1000,\n      interval: slidePost === 1 && parseInt(slideDuration) > 0 ? (parseInt(slideDuration) * 1000) : 5000,\n      perPage: isTagShop ? cardNumber : numberOfCoumn > 0 ? numberOfCoumn : 5,\n      perMove: 1,\n      gap: 0,\n      autoplay: slidePost === 1 ? true : false,\n      padding: 0,\n      pagination: false,\n      arrows: true,\n      breakpoints: {\n        560: {\n          perPage: isTagShop ? cardNumber : mobileColumn > 0 ? mobileColumn : 1,\n        },\n        767: {\n          perPage: isTagShop ? cardNumber : mobileColumn > 0 ? mobileColumn : 2,\n        },\n        991: {\n          perPage: isTagShop ? cardNumber : mobileColumn > 0 ? mobileColumn : 3,\n        },\n        1200: {\n          perPage: isTagShop ? cardNumber : numberOfCoumn > 0 ? numberOfCoumn : 4,\n        },\n        1400: {\n          perPage: isTagShop ? cardNumber : numberOfCoumn > 0 ? numberOfCoumn : 5,\n        },\n        1600: {\n          perPage: isTagShop ? cardNumber : numberOfCoumn > 0 ? numberOfCoumn : 6,\n        }\n      }\n    };\n    return (parentID != \"\" ?\n      <div className=\"tb_ht_post_container\">\n        <Splide hasTrack={false} className=\"tb_ht_post_slider\" options={settings} extensions={{ Grid }} ref={(parentID) => this.inputRefs[inputName] = parentID} onMove={this.autoScrollSlider}>\n          <SplideTrack>\n            {\n\n              (wall.ThemeRule.multiRow > 1 && postData.length !== 1 && postData.length % 2 !== 0 ? postData.pop() : postData) && ((postData && postData.length > 0)) && postData.map((item, index) => {\n                const cardData = completeDataObject[item];\n\n                return <SplideSlide key={index} style={{ margin: 0, padding: 0 }} className={`tb_${cardData.id}`} p_id={parentID} >\n                  <Card itemData={cardData} itemIndex={index} personalization={wall.Personalization} ThemeRule={wall.ThemeRule} clickToShowPopUp={clickToShowPopUp} wallID={wall.Wall.id} onClickToCTA={onClickToCTA} adjustWidth={adjustWidth} wall={wall} onClickPopUpSlider={onClickPopUpSlider} />\n                </SplideSlide>\n              })}\n          </SplideTrack>\n\n          <div className=\"splide__arrows splide__arrows--ltr tb_ht_arrow_wrapper_\">\n            <div className=\"tb_ht_arrow splide__arrow splide__arrow--prev tb_ht_arrow tb_ht_arrow_left__ tb__icon tb-arrow-left-alt\" role=\"button\" aria-label=\"Go to previous slide\"><div></div></div>\n            <div className=\"tb_ht_arrow splide__arrow splide__arrow--next  tb_ht_arrow_right__ tb__icon tb-arrow-right-alt\" role=\"button\" aria-label=\"Go to next slide\"><div></div></div>\n\n          </div>\n        </Splide>\n      </div> : null\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getDataNextSteps: (wallID, timeStamp, postCount, networkId, after, postData, heightEvent, updateInStateNow) => dispatch(getDataNextSteps(wallID, timeStamp, postCount, networkId, after, postData, heightEvent, updateInStateNow)),\n  }\n}\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(HighlightTheme));\n"],"names":["CTAButton","PureComponent","render","cta","ctaClass","postCta","onClickToCTA","item","this","props","postCtaStatus","status","ctaStyle","color","backgroundColor","background","_jsxs","className","style","role","tabIndex","onClick","e","stopPropagation","window","open","concat","url","children","text","_ref","itemData","wall","wallID","themeID","ownerId","ThemeRule","size","isTagEmbed","User","userDatabaseType","aspectImageRatio","isVideo","type","autoPlay","tabindex","_jsx","MediaIcon","IconClass","show","isCenter","Video","VideoClass","data","Personalization","widgetTheme","isCover","muted","Image","ImageClass","hotspot","personalization","clickToShowPopUp","itemIndex","adjustWidth","onClickPopUpSlider","isMerge","postTrack","useRef","themeMode","postHover","isTagShop","overlay","isTagbox","overlayStyle","cardColor","cardSize","padding","mediaType","ctaStatus","Object","keys","length","cardRadius","isShopBtn","ugc_products","isProduct","isShopIcon","isHotspot","useEffect","themeImpressionTracking","isPopUp","id","network","ref","referenceId","feedId","content","borderRadius","Media","Network","networkClass","isDefault","iconType","ShopButton","btnClass","HighlightTheme","Component","constructor","super","requestData","appendData","preRender","hasMoreData","getDataNextSteps","Wall","Math","floor","Date","now","numberOfPosts","networkID","after","heightEvent","onUpdateData","event","autoScrollSlider","splide","prev","next","destIndex","isTagembedStatus","currentIndex","perPage","index","inputRefs","componentDidMount","setTimeout","document","querySelectorAll","forEach","element","removeAttribute","componentDidUpdate","value","values","postData","completeDataObject","parentID","rowCount","multiRow","map","classList","filterID","String","split","filter","fCheck","includes","getID","replace","findIndex","find","clickD","clickDD","p_id","getAttribute","addEventListener","preventDefault","childNodes","childItem","subChildItem","_wall$Personalization","cardNumber","inputName","numberOfCoumn","mobileColumn","slidePost","slideDuration","autoScrollStatus","cloneStatus","undefined","clonePost","clones","isType","settings","grid","rows","rewind","rewindSpeed","interval","parseInt","perMove","gap","autoplay","pagination","arrows","breakpoints","Splide","hasTrack","options","extensions","Grid","onMove","SplideTrack","pop","cardData","SplideSlide","margin","Card","memo","connect","state","dispatch","timeStamp","postCount","networkId","updateInStateNow"],"sourceRoot":""}
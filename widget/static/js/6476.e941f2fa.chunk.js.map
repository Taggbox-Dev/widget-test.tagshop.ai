{"version":3,"file":"static/js/6476.e941f2fa.chunk.js","mappings":"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","sources":["app/Themes/Elements/PostContent/PostContentConvertion.js"],"sourcesContent":["import React, { memo } from \"react\";\nimport Emojify from 'react-emojione';\nimport ReactHtmlParser from 'react-html-parser';\nconst reactStringReplace = require(\"react-string-replace\");\n//import { PostTrimContent } from \"../../../../actions/themeActions\";\nconst convertSlackEmoji = (data) => {\n    return <Emojify>{ReactHtmlParser(data)}</Emojify>\n}\nconst ContentWithOutSlack = ({ data, content, Personalization }) => {\n    const customHasTagStyle = {\n        color: Personalization.hashtag_color,\n        fontWeight: \"bold\",\n        backgroundColor: Personalization.hashtag_background_status == 1 ? Personalization.hashtag_background_color : 'transparent'\n    }\n\n    return data.network.id == 20 && window.slackdown ? <>\n        {Personalization.hashtag_highlight === 1 &&\n            Personalization.hashtag_feed === 0 &&\n            Personalization.hashtag_all === 0\n            ? ReactHtmlParser(content)\n            : Personalization.hashtag_highlight === 1 &&\n                Personalization.hashtag_feed === 0 &&\n                Personalization.hashtag_all === 1\n                ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                    content,\n                    /#(\\w+)/g,\n                    (match, i) => (\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                            #{match}\n                        </div>\n                    )\n                ), data.slackMember))\n                : Personalization.hashtag_highlight === 1 &&\n                    Personalization.hashtag_feed === 1 &&\n                    Personalization.hashtag_all === 0\n                    ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                        content,\n                        data.hash.hashString,\n                        (match, i) => (\n                            <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                {match}\n                            </div>\n                        )\n                    ), data.slackMember))\n                    : Personalization.hashtag_highlight === 1 &&\n                        Personalization.hashtag_feed === 1 &&\n                        Personalization.hashtag_all === 1\n                        ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                            content,\n                            /#(\\w+)/g,\n                            (match, i) => (\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                    #{match}\n                                </div>\n                            )\n                        ), data.slackMember))\n                        : convertSlackEmoji(window.slackdown.parse(content, data.slackMember))}\n    </> : <>\n\n        {Personalization.hashtag_highlight === 1 &&\n            Personalization.hashtag_feed === 0 &&\n            Personalization.hashtag_all === 0\n            ? ReactHtmlParser(content)\n            : Personalization.hashtag_highlight === 1 &&\n                Personalization.hashtag_feed === 0 &&\n                Personalization.hashtag_all === 1\n                ? reactStringReplace(\n                    ReactHtmlParser(content),\n                    /#(\\w+)/g,\n                    (match, i) => (\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                            #{match}\n                        </div>\n                    )\n                )\n                : Personalization.hashtag_highlight === 1 &&\n                    Personalization.hashtag_feed === 1 &&\n                    Personalization.hashtag_all === 0\n                    ? reactStringReplace(\n                        ReactHtmlParser(content),\n                        data.hash.hashString,\n                        (match, i) => (\n                            <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                {match}\n                            </div>\n                        )\n                    )\n                    : Personalization.hashtag_highlight === 1 &&\n                        Personalization.hashtag_feed === 1 &&\n                        Personalization.hashtag_all === 1\n                        ? reactStringReplace(\n                            ReactHtmlParser(content),\n                            /#(\\w+)/g,\n                            (match, i) => (\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                    #{match}\n                                </div>\n                            )\n                        )\n                        : ReactHtmlParser(content)}\n    </>\n}\n\nexport default memo(ContentWithOutSlack);"],"names":["reactStringReplace","require","convertSlackEmoji","data","_jsx","Emojify","children","ReactHtmlParser","ContentWithOutSlack","_ref","content","Personalization","customHasTagStyle","color","hashtag_color","fontWeight","backgroundColor","hashtag_background_status","hashtag_background_color","network","id","window","slackdown","_Fragment","hashtag_highlight","hashtag_feed","hashtag_all","parse","match","i","_jsxs","className","style","slackMember","hash","hashString","concat","memo"],"sourceRoot":""}
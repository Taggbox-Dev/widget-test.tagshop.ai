{"version":3,"file":"static/js/1483.16ed4270.chunk.js","mappings":"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","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","app/Themes/Elements/InViewWrapper.js","../node_modules/react-intersection-observer/src/useInView.tsx","app/Themes/GalleryTheme/Elements/Card.js"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import { useInView } from 'react-intersection-observer';\r\nimport { isTagShop } from '../../../actions/api';\r\nimport { themeImpressionTracking } from '../../../utils';\r\n\r\n// Functional component wrapper\r\nconst InViewWrapper = ({ children }) => {\r\n       const { ref, inView } = useInView({\r\n              triggerOnce: true, // Trigger only once\r\n              threshold: 0.01, // Trigger when 10% of the element is visible\r\n       });\r\n       if (isTagShop) themeImpressionTracking(ref);\r\n       return  children({ ref, inView });\r\n};\r\nexport default InViewWrapper","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import React, { Suspense, useEffect, lazy } from \"react\";\r\nimport { PostTrimContent } from '../../../../utils'\r\nimport { isTagShop } from \"../../../../actions/api\";\r\nimport InViewWrapper from \"../../Elements/InViewWrapper\";\r\nconst Media = lazy(() => import('./Media'));\r\nconst AuthorDetails = lazy(() => import('./AuthorDetails'));\r\nconst ShopButton = lazy(() => import('../../Elements/ShopButton/ShopButton'));\r\nconst Network = lazy(() => import('../../Elements/Network/Network'));\r\nconst PostContent = lazy(() => import('../../Elements/PostContent/PostContent'));\r\n\r\n  const trim_content_length = 200;\r\n  const Card = ({ CardStyle, clickToShowPopUp, index, ThemeStyle, Post,  postSizeInPx,  onClickPopUpSlider }) => {\r\n  const mediaType = Post?.type !== 1 ? true : false;\r\n  const postTextContent = CardStyle?.content.trimcontent ? PostTrimContent(Post?.content?.text, trim_content_length) : Post?.content?.text\r\n  const responsiveCardSize2x = postSizeInPx < 250 ? true : false\r\n  const themeMode = 'dark'\r\n\r\n  useEffect(() => {\r\n    if (Post?.isPopUp) onClickPopUpSlider(index, Post)\r\n  }, [index, Post?.isPopUp, Post]);\r\n  return <InViewWrapper>\r\n    {({ ref, inView }) => (\r\n    Post &&  <div id={`tb-gt-post-${Post.id}`} className={`tb_gt_post_wrapper${responsiveCardSize2x ? ' tb_gt_post_wrapper2x' : ''}`} tb-network={Post.networkId} tb-product={ CardStyle.shopText != '' &&  Post.isShopIcon ? 1 : Post.isHotspot ? 2 : 0} style={{opacity: inView ? 1 : 0, transition: inView ? 'opacity .7s ease-in-out' : ''}} post-id={Post.referenceId ? Post.referenceId : Post.id} feed-id={Post.feedId} ref={ref}>\r\n      <div className={`tb_gt_post_in${isTagShop ? ' tb_gt_post_ani' : ''}`} onClick={clickToShowPopUp(index, Post)} role=\"article\" aria-label={postTextContent} tabIndex={0}>\r\n          {mediaType ? <Suspense fallback={<></>}><Media Post={Post} CardStyle={CardStyle} ThemeStyle={ThemeStyle} index={index} inView={inView}/></Suspense> : ''}\r\n          {!Post.isHotspot ? <>\r\n            <div className=\"tb_gt_post_details\" aria-hidden=\"true\">\r\n              {isTagShop ? <div className=\"tb_gt_social_\" role=\"presentation\">  \r\n                <Suspense fallback={<></>}><Network networkClass={'tb_gt_social__ico'} networkId={Post.networkId} iconStyle={CardStyle.icon} /></Suspense>\r\n              </div> : null}\r\n              { Post.isShopIcon && CardStyle.shopText != '' ? <Suspense fallback={<></>}><ShopButton ThemeStyle={ThemeStyle} CardStyle={CardStyle} mode={1} btnClass={'tb_gt_btn_wrap'} /></Suspense> : null}\r\n              {!isTagShop ? <>\r\n                <div className=\"tb_gt_contant_wrapper\">\r\n                  {!CardStyle.content.status || Post.type == 1 ? <Suspense fallback={<></>}>\r\n                  <PostContent\r\n                      contentClass={'tb_gt_content'}\r\n                      item={Post}\r\n                      content={postTextContent}\r\n                      CardStyle={CardStyle}\r\n                      contentTitle={Post.contentTitle}\r\n                    /> \r\n                    </Suspense> : ''}\r\n                </div>\r\n                <Suspense fallback={<></>}>\r\n                  <AuthorDetails Post={Post}  CardStyle={CardStyle} />\r\n                </Suspense>\r\n              </>\r\n                : null}\r\n            </div>\r\n            <div className={`tb_gt_post_overlay tb_gt_post_overlay-${themeMode}`}><div></div></div>\r\n          </> : null}\r\n        </div>\r\n    </div>\r\n        )}\r\n      </InViewWrapper>\r\n}\r\nexport default Card"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","_ref","children","ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","useInView","isTagShop","themeImpressionTracking","Media","lazy","AuthorDetails","ShopButton","Network","PostContent","_Post$content","_Post$content2","CardStyle","clickToShowPopUp","index","ThemeStyle","Post","postSizeInPx","onClickPopUpSlider","mediaType","type","postTextContent","content","trimcontent","PostTrimContent","text","responsiveCardSize2x","useEffect","isPopUp","_jsx","InViewWrapper","_ref2","className","networkId","shopText","isShopIcon","isHotspot","style","opacity","transition","referenceId","feedId","_jsxs","onClick","role","tabIndex","Suspense","fallback","_Fragment","networkClass","iconStyle","icon","mode","btnClass","status","contentClass","item","contentTitle"],"sourceRoot":""}
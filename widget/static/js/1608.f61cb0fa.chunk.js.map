{"version":3,"file":"static/js/1608.f61cb0fa.chunk.js","mappings":"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","sources":["app/Themes/Elements/Author/Author.js","app/Themes/Elements/CTA/CtaButton.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","app/Themes/Elements/InViewWrapper.js","../node_modules/react-intersection-observer/src/useInView.tsx","app/Themes/Elements/Network/Network.js","app/Themes/Elements/Seprator/Seprator.js","app/Themes/Elements/ShareOnHover/ShareOnHover.js","app/Themes/Elements/Time/Time.js","app/Themes/Waterfall/Focus/Elements/AuthorDetails.js","app/Themes/Waterfall/Focus/Elements/Media.js","app/Themes/Waterfall/Focus/Elements/Card.js","app/Themes/Waterfall/Focus/index.js","utils/Network.js"],"sourcesContent":["import React, {PureComponent } from \"react\";\r\nimport { GET_NETWORK_COLOR } from \"../../../../utils/Network\";\r\nexport default class Author extends PureComponent {\r\n\r\n  render() {\r\n    const { author, authorClass, networkId, size, inView } = this.props;\r\n\r\n    return <div key={Math.random()} className={authorClass} style={{ overflow: networkId == 4 ? 'visible' : '' }}>\r\n              {inView ? <img className={`${authorClass}__`} src={author.picture} aria-label=\"author\" alt={author.name} width={size ? size : 44} height={size ? size : 44}\r\n              onError={(e) => {\r\n                const networkColor = GET_NETWORK_COLOR(networkId); \r\n                const background = networkColor == '#ffffff' ? '000' : networkColor.replace(\"#\", \"\"); \r\n                e.target.src = author.errorPic ? author.errorPic : `https://ui-avatars.com/api/?name=${author.name.replace(/\\s/g, '')}&background=${background}&color=fff&length=1`}}\r\n              /> : null}\r\n          </div>\r\n  }\r\n}\r\n\r\n","import React, { PureComponent } from \"react\";\r\nclass CTAButton extends PureComponent {\r\n  render() {\r\n    const { Post, ctaClass, onClickToCTA } = this.props;\r\n    const {cta} = Post\r\n    const ctaStyle = {\r\n      color: cta?.color,\r\n      backgroundColor: cta?.background\r\n    }\r\n\r\n    return <div className={ctaClass} style={ctaStyle} role=\"button\" tabIndex=\"0\" aria-label=\"CTA Button\"\r\n      onClick={\r\n        (e) => {\r\n          e.stopPropagation();\r\n          onClickToCTA(Post)\r\n          window.open(\r\n            `${cta.url}`,\r\n            '_blank')\r\n        }}\r\n    > {cta.text}</div>\r\n  }\r\n}\r\n\r\n\r\nexport default (CTAButton);","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import { useInView } from 'react-intersection-observer';\r\nimport { isTagShop } from '../../../actions/api';\r\nimport { themeImpressionTracking } from '../../../utils';\r\n\r\n// Functional component wrapper\r\nconst InViewWrapper = ({ children }) => {\r\n       const { ref, inView, entry } = useInView({\r\n              triggerOnce: true, // Trigger only once\r\n              threshold: 0.01, // Trigger when 10% of the element is visible\r\n       });\r\n       if (inView) themeImpressionTracking(entry);\r\n       return children({ ref, inView });\r\n};\r\nexport default InViewWrapper","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import React, { PureComponent, Suspense } from \"react\";\r\nimport { GET_NETWORK_ICON, GET_NETWORK_NAME } from \"../../../../utils/Network\";\r\nimport \"./IconDefaultColor.scss\"\r\nconst DefaultNetwork = React.lazy(() => import(\"./DefaultNetwork\"));\r\n\r\nexport default class Network extends PureComponent {\r\n  render() {\r\n    const { networkId, networkClass, iconStyle, isPopUp } = this.props;\r\n    const defaultNetworks = [7, 4, 36]\r\n    const isDefaultIcon = iconStyle?.default==1 || (defaultNetworks.includes(networkId))\r\n    return (isDefaultIcon ?  <Suspense fallback={<></>}><DefaultNetwork networkId={networkId} networkClass={networkClass} /></Suspense> : <div className={`${networkClass} tb__icon tb-${GET_NETWORK_ICON(networkId)}`} aria-label={`post network ${GET_NETWORK_NAME(networkId)}`}><div></div></div>);\r\n  }\r\n}\r\n","import React from \"react\"; \r\nconst Seprator = (props) => {\r\n  const { sepClass } = props;\r\n  return <div className={sepClass}>   </div>\r\n}\r\n\r\nexport default Seprator","import React, { PureComponent } from \"react\";\r\nimport { gtmAnalytics, themePostTracking } from \"../../../../actions/moredataAction\";\r\nimport './scss/ShareOnHover.scss'\r\n\r\nexport default class ShareOnHover extends PureComponent {\r\n  onClickData = (shareURL) => event => {\r\n    const { Post, ThemeInfo } = this.props;\r\n    event.stopPropagation();\r\n      themePostTracking({\r\n      type: 2,\r\n      action: 2,\r\n      wall: ThemeInfo.wallID,\r\n      feed: Post.feedId,\r\n      post: Post.referenceId ? Post.referenceId : Post.id,\r\n      owner: ThemeInfo.ownerId\r\n    })\r\n    gtmAnalytics(\"Tagbox\", \"shareUrl\", \"shareUrl\", shareURL)\r\n    window.open(shareURL, \"_blank\")\r\n  }\r\n\r\n  render() {\r\n    const { shareClass, Post } = this.props;\r\n    const {facebook,twitter, linkedin } = Post?.share;\r\n    \r\n    const GetShareIncon=({shareOn, icon})=>{\r\n      return <div className=\"tb_share_icon_list\">\r\n            <div onClick={this.onClickData(shareOn)} className={`tb_share_ico__ tb__icon tb-${icon}`} title={icon}><div></div></div>\r\n      </div>\r\n    }\r\n    return <div className={`tb_share_wrapper ${shareClass}`}>\r\n      <div className={`tb_share_button_ tb__icon ${'tb-share'}`}><div></div></div>\r\n      <div className=\"tb_share_icon_list_wrap\">\r\n        {facebook ? <GetShareIncon shareOn={facebook} icon={'facebook'} />  : ''}\r\n        {twitter  ? <GetShareIncon shareOn={twitter} icon={'twitter'} />  : ''}\r\n        {linkedin ? <GetShareIncon shareOn={linkedin} icon={'linkedin'} />  : ''}\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n","import React, { memo } from \"react\"; \r\nimport { timeAgo } from \"../../../../utils/Common\";\r\nconst Time = (props) => {\r\n  const { createdAt, timeClass } = props;\r\n  return <div className={timeClass} role=\"status\" aria-label={`post timestamp ${timeAgo(createdAt)}`}>{timeAgo(createdAt)}</div>\r\n}\r\n\r\nexport default memo(Time)","import React from 'react'\r\nimport { isInstaUser } from '../../../../../utils';\r\nimport Author from '../../../Elements/Author/Author';\r\nimport Time from '../../../Elements/Time/Time';\r\nimport Network from '../../../Elements/Network/Network';\r\nimport Seprator from '../../../Elements/Seprator/Seprator';\r\n\r\n  const AuthorDetails = ({ Post, CardStyle, inView }) => {\r\n  const { author, networkId } = Post\r\n  const username = author.username ? author.username.length > 0 ? `@${author.username}` : `` : '';\r\n  const authorStatus = (CardStyle.author.status && !isInstaUser(author.name)) ? true : false;\r\n  const sepratorStatus = (authorStatus && CardStyle.timeStatus) ? true : false;\r\n  return <div className=\"tb_w_f_author_wrapper\" aria-label=\"Author details\" aria-roledescription=\"post author details\">\r\n    <div className=\"tb_w_f_author\">\r\n      {authorStatus ? \r\n          <Author author={author} networkId={networkId} authorClass={'tb_w_f_author_profile'} inView={inView} />\r\n      : ''}\r\n\r\n      <div className=\"tb_w_f_author_info\">\r\n        {authorStatus ? <div className=\"tb_w_f_authorname\">{author.name}</div> : ''}\r\n        <div className=\"tb_w_f_post_info\">\r\n          {authorStatus ? <div className=\"tb_w_f_username\">{username}</div> : ''}\r\n          {sepratorStatus ? <Seprator sepClass={`tb_w_f_seprator`} /> : ''}\r\n          {CardStyle.timeStatus ? \r\n              <Time createdAt={Post.createdAt} timeClass={`tb_w_f_time tb-cTBfont-${CardStyle.author.variant}`} />\r\n          : ''}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"tb_w_f_social_\">\r\n      <Network networkClass={'tb_w_f_social_ico'} networkId={networkId} iconStyle={CardStyle.icon} />\r\n    </div>\r\n  </div>\r\n}\r\nexport default AuthorDetails","import React from \"react\";\r\nimport { isSocialEmbed, isTagShop } from \"../../../../../actions/api\";\r\nimport Image from '../../../Elements/Media/Image';\r\nimport Video from '../../../Elements/Media/Video';\r\nimport MediaIcon from '../../../Elements/MediaIcon/MediaIcon';\r\nimport Like from '../../../Elements/Reactions/Like';\r\n\r\nconst Media = ({ Post, ThemeStyle, index, inView, wallID }) => {\r\n  const mediaIcon = Post.hotspot ? false : true\r\n  const isVideo = ([3,5].includes(Post.type)) && (ThemeStyle.autoPlay == 1) ? true : false\r\n  const interactive = ThemeStyle.interactive && isSocialEmbed ? true : false\r\n  return <div className=\"tb_w_f_media_wrap\">\r\n      <MediaIcon Post={Post} IconClass={`tb_w_f_media_icon`} show={mediaIcon} hideVideo={ThemeStyle.autoPlay} />\r\n      {isVideo ? \r\n      <Video VideoClass=\"tb_w_f_video\" Post={Post} size={false} isCover={true} controls={false} autoPlay={true} muted={true} observer={true} index={index} inView={inView} /> \r\n      :\r\n      <Image ImageClass=\"tb_w_f_image\" Post={Post} size={100} hotspot={false} blurBG={isTagShop} observer={true} index={index} inView={inView} /> }\r\n      {interactive ? <Like Post={Post} ThemeStyle={ThemeStyle} wallID={wallID} interactiveCount={ThemeStyle.interactiveCount} /> : null}\r\n  </div>\r\n}\r\nexport default Media","import React, { Suspense, useRef } from 'react'\r\nimport { isTagShop, isTagbox, isSocialWall  } from '../../../../../actions/api';\r\nimport { PostTrimContent } from '../../../../../utils';\r\nimport AuthorDetails from \"./AuthorDetails\";\r\nimport Media from \"./Media\";\r\nimport ShareOnHover from \"../../../Elements/ShareOnHover/ShareOnHover\";\r\nimport CTAButton from \"../../../Elements/CTA/CtaButton\";\r\nimport InViewWrapper from '../../../Elements/InViewWrapper';\r\nconst SocialAction = React.lazy(() => import('../../../Elements/SocialAction/SocialAction'));\r\n\r\n\r\nconst trim_content_length = 200;\r\n\r\nconst Card = ({ postSize, clickToShowPopUp, index, onClickToCTA, ThemeStyle, CardStyle, Post, ThemeInfo }) => {\r\n  const mediaType = Post.type !== 1;\r\n  const postTextContent = CardStyle.content.trimcontent ? PostTrimContent(Post.content.text, trim_content_length) : Post.content.text;\r\n  const cardActions = (Post.ctaStatus || ThemeStyle.shareOption) && CardStyle.actionStatus && !isSocialWall ? true : false;\r\n  const padding = isSocialWall ? { padding: ThemeStyle.spacing } : null\r\n\r\n  return (\r\n    <InViewWrapper>\r\n      {({ ref, inView }) => (\r\n        <div ref={ref} style={{ width: `${postSize}%`, padding: CardStyle.style.padding / 2, opacity: inView ? 1 : 0, transition: inView ? 'opacity .5s ease-in-out' : '' }} className={`tb_w_f_post_wrapper`} role=\"article\" area-label={Post.content.text} post-id={Post.referenceId ? Post.referenceId : Post.id} feed-id={Post.feedId}>\r\n          <div id={`tb_w_c_id-${Post.id}`} tb-network={Post.networkId} post-id={Post.referenceId || Post.id} feed-id={Post.feedId} tabIndex=\"0\" area-label={postTextContent} role=\"article\">\r\n              <div className=\"tb_w_f_post_in\" onClick={clickToShowPopUp(index, Post)} role=\"button\" aria-label=\"open detail modal for post\" tabIndex=\"0\" style={padding}>\r\n                {Post.share.status ? (\r\n                  <ShareOnHover share={Post.share} shareClass={\"tb_w_c_share_container\"} Post={Post} ThemeInfo={ThemeInfo} />\r\n                ) : null}\r\n                {mediaType ? (\r\n                  <Media Post={Post} CardStyle={CardStyle} ThemeStyle={ThemeStyle} ThemeInfo={ThemeInfo} index={index} inView={inView} />\r\n                ) : null}\r\n                {Post.ctaStatus && !isSocialWall ? <div className=\"tb_w_f_post_cta\"><CTAButton ctaClass={'tb_w_f_post_cta_btn'} cta={Post.cta} item={Post} onClickToCTA={onClickToCTA} /> </div> : ''}\r\n                <div className=\"tb_w_f_contant_wrapper\">\r\n                  <AuthorDetails Post={Post} CardStyle={CardStyle} ThemeStyle={ThemeStyle} mediaType={mediaType} ThemeInfo={ThemeInfo} inView={inView} />\r\n                </div>\r\n                {cardActions ? (\r\n                  <Suspense fallback={''}>\r\n                    <SocialAction Post={Post} CardStyle={CardStyle} actionClass={`tb_w_f_social_action__`} />\r\n                  </Suspense>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n        </div>\r\n      )}\r\n    </InViewWrapper>\r\n  );\r\n}\r\nexport default Card","import React, { PureComponent } from \"react\";\r\nimport Masonry from 'react-masonry-component';\r\nimport \"./scss/Focus.scss\";\r\nimport Card from './Elements/Card';\r\nimport { getColumns, getSizeInPercent } from \"../../../../utils\";\r\nclass Focus extends PureComponent {\r\n\r\n  componentDidMount(){\r\n    this.props.loadBranding()\r\n  }\r\n\r\n  render() {\r\n    const { postData, completeDataObject, CardStyle, ThemeStyle, ThemeInfo, clickToShowPopUp, onClickToCTA, onClickPopUpSlider, containerSize } = this.props;\r\n    const responsiveColumns = Math.max((containerSize.width / (CardStyle.minimumWidth + 20)).toFixed(), 1)\r\n    const columns =  getColumns(containerSize.width, ThemeStyle.column, responsiveColumns);\r\n    const postSize = getSizeInPercent(containerSize.width, columns)\r\n\r\n    return (<Masonry\r\n                className={`tb_w_f_post_container`}\r\n                tabIndex='0'\r\n                aria-label={`There are ${(postData && postData.length > 0) ? postData.length : 0} posts in the feed`} role=\"feed\"\r\n                elementType={'div'}\r\n                options={{\r\n                  transitionDuration: 0,\r\n                  percentPosition: true,\r\n                  itemSelector: '.tb_w_f_post_wrapper',\r\n                  horizontalOrder: false,\r\n                  resize: true,\r\n                }}\r\n                disableImagesLoaded={false}\r\n                updateOnEachImageLoad={false}\r\n                imagesLoadedOptions={{}}\r\n                enableResizableChildren={true}>{\r\n                  ((postData && postData.length > 0)) && postData.map((item, index) => {\r\n                    const cardData = completeDataObject[item];\r\n                    return <Card key={index} postSize={postSize} clickToShowPopUp={clickToShowPopUp} onClickToCTA={onClickToCTA} onClickPopUpSlider={onClickPopUpSlider} Post={cardData} index={index} CardStyle={CardStyle} ThemeStyle={ThemeStyle} ThemeInfo={ThemeInfo}/>\r\n                  })\r\n                }\r\n              </Masonry>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Focus","\r\nexport const GET_NETWORK_ICON = (e) => {\r\n        const icons = {\r\n            0: \"manual-upload\",\r\n            1: \"twitter\",\r\n            2: \"instagram\",\r\n            3: \"facebook\",\r\n            4: \"google\",\r\n            5: \"pinterest\",\r\n            6: \"flickr\",\r\n            7: \"youtube\",\r\n            8: \"vimeo\",\r\n            10: \"linkedin\",\r\n            11: \"tumblr\",\r\n            12: \"rss\",\r\n            13: \"star\",\r\n            15: \"workplace\",\r\n            18: \"instagram\",\r\n            19: \"yelp\",\r\n            20: \"slack\",\r\n            21: \"yammer\",\r\n            23: \"airbnb\",\r\n            25: \"soundcloud\",\r\n            26: \"giphy\",\r\n            27: \"deviantart\",\r\n            28: \"tiktok\",\r\n            29: \"onsite-upload\",\r\n            30: \"vkontakte\",\r\n            32: \"chrome\",\r\n            33: \"collabration\",\r\n            34: \"amazon\",\r\n            35: \"tripadvisor\",\r\n            36:  \"star\",\r\n            37: \"aliexpress\",\r\n        };\r\n        return icons[e] || \"\";\r\n};\r\n\r\n\r\nexport const GET_NETWORK_COLOR = (e) => {\r\n    const colors = {\r\n        0: \"#313A53\",\r\n        1: \"#29a9e1\",\r\n        2: \"#000000\",\r\n        3: \"#1b74e4\",\r\n        4: \"#4081ed\",\r\n        5: \"#e60022\",\r\n        6: \"#0a63dc\",\r\n        7: \"#FF0000\",\r\n        8: \"#1eb8eb\",\r\n        10: \"#0a66c2\",\r\n        11: \"#36465d\",\r\n        12: \"#f78422\",\r\n        13: \"#FABF04\",\r\n        15: \"#4767ab\",\r\n        18: \"#000000\",\r\n        19: \"#be362e\",\r\n        20: \"#510d4e\",\r\n        21: \"#0078d4\",\r\n        23: \"#ff7977\",\r\n        25: \"#ff7700\",\r\n        26: \"#000000\",\r\n        27: \"#00e59b\",\r\n        28: \"#000000\",\r\n        29: \"#613983\",\r\n        30: \"#0077FF\",\r\n        32: \"#4c8bf5\",\r\n        33: \"#4e69ed\",\r\n        34: \"#4e69ed\",\r\n        35: \"#60c196\",\r\n        36: \"#00e9ff\",\r\n        37: \"#E52F20\",\r\n    };\r\n    return colors[e] || \"\";\r\n};\r\n\r\n\r\nexport const GET_NETWORK_NAME = (e) => {\r\n    const names = {\r\n        0: \"Manual Upload\",\r\n        1: \"Twitter\",\r\n        2: \"Instagram\",\r\n        3: \"Facebook\",\r\n        4: \"Google\",\r\n        5: \"Pinterest\",\r\n        6: \"Flickr\",\r\n        7: \"YouTube\",\r\n        8: \"Vimeo\",\r\n        10: \"LinkedIn\",\r\n        11: \"Tumblr\",\r\n        12: \"RSS\",\r\n        13: \"Star\",\r\n        15: \"Workplace\",\r\n        18: \"Instagram\",\r\n        19: \"Yelp\",\r\n        20: \"Slack\",\r\n        21: \"Yammer\",\r\n        23: \"Airbnb\",\r\n        25: \"Soundcloud\",\r\n        26: \"Giphy\",\r\n        27: \"Deviantart\",\r\n        28: \"Tiktok\",\r\n        29: \"Review Hub\",\r\n        30: \"Vkontakte\",\r\n        32: \"Chrome Extension\",\r\n        33: \"Collab with Creators\",\r\n        34: \"Amazon\",\r\n        35: \"Tripadvisor\",\r\n        36: \"Review Hub\",\r\n        37: \"Aliexpress\",\r\n    };\r\n    return names[e] || \"\";\r\n};\r\n\r\n"],"names":["Author","PureComponent","render","author","authorClass","networkId","size","inView","this","props","_jsx","className","style","overflow","children","src","picture","alt","name","width","height","onError","e","networkColor","GET_NETWORK_COLOR","background","replace","target","errorPic","Math","random","CTAButton","Post","ctaClass","onClickToCTA","cta","ctaStyle","color","backgroundColor","_jsxs","role","tabIndex","onClick","stopPropagation","window","open","url","text","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","disconnect","React","_ref","ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","useInView","themeImpressionTracking","DefaultNetwork","Network","networkClass","iconStyle","isPopUp","default","includes","Suspense","fallback","_Fragment","GET_NETWORK_ICON","GET_NETWORK_NAME","sepClass","ShareOnHover","constructor","onClickData","shareURL","event","ThemeInfo","themePostTracking","type","action","wall","wallID","feed","feedId","post","referenceId","owner","ownerId","gtmAnalytics","shareClass","facebook","twitter","linkedin","share","GetShareIncon","shareOn","icon","title","Time","createdAt","timeClass","timeAgo","memo","CardStyle","username","authorStatus","status","isInstaUser","sepratorStatus","timeStatus","Seprator","variant","ThemeStyle","index","mediaIcon","hotspot","isVideo","autoPlay","interactive","isSocialEmbed","MediaIcon","IconClass","show","hideVideo","Video","VideoClass","isCover","controls","muted","Image","ImageClass","blurBG","isTagShop","Like","interactiveCount","SocialAction","postSize","clickToShowPopUp","mediaType","postTextContent","content","trimcontent","PostTrimContent","cardActions","ctaStatus","shareOption","actionStatus","isSocialWall","padding","spacing","InViewWrapper","_ref2","opacity","transition","Media","item","AuthorDetails","actionClass","Focus","componentDidMount","loadBranding","postData","completeDataObject","onClickPopUpSlider","containerSize","responsiveColumns","max","minimumWidth","toFixed","columns","getColumns","column","getSizeInPercent","Masonry","elementType","transitionDuration","percentPosition","itemSelector","horizontalOrder","resize","disableImagesLoaded","updateOnEachImageLoad","imagesLoadedOptions","enableResizableChildren","cardData","Card"],"sourceRoot":""}
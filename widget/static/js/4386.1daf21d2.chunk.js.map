{"version":3,"file":"static/js/4386.1daf21d2.chunk.js","mappings":"2LAKA,MAkCA,EAlCmBA,KACf,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GAuBrC,OANAC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAgBC,YAAW,IAAMJ,GAAU,IAAQ,KACzD,MAAO,KACHK,aAAaF,EAAc,CAC9B,GACF,KAEEJ,IAAWO,EAAAA,EAAAA,OAAmBC,EAAAA,IAAaC,EAAAA,MAAYC,EAAAA,EAAAA,MAKpD,MAJAC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAaC,QAvBVC,IACtBA,EAAMC,iBACN,MAAMC,EAAOC,SAASC,gBAClBF,EAAKG,kBACLH,EAAKG,oBACEH,EAAKI,qBACZJ,EAAKI,uBACEJ,EAAKK,wBACZL,EAAKK,0BACEL,EAAKM,qBACZN,EAAKM,sBAETrB,GAAU,EAAM,EAW0CsB,SAAA,EAClDC,EAAAA,EAAAA,KAAA,OAAKZ,UAAU,qBAAoBW,UAACC,EAAAA,EAAAA,KAAA,YAAiB,uBAGrD,C,wEClCT,MAAMC,EAAqBA,CAACC,EAAWC,EAAQC,EAAOC,EAAOC,KAC7D,IACO,MAAMC,EAAeC,EAAgBC,EAAiBN,IAAW,IAC3DO,EAAWF,EAAgBC,EAAiBL,IAAU,IAI5D,MAAO,CAAEO,WAHoB,IAAVN,GACTH,EAAYK,EAAyB,GAAVD,IAAyB,GAARD,GAC7CH,EAAYK,EAAe,MAAkB,GAAVD,EACvBC,eAAcG,WAC1C,CAAE,MACK,MAAO,CAAEC,WAAY,EAAGJ,aAAc,EAAGG,SAAU,EAC1D,GAGMD,EAAoBG,IAC1B,IACO,IAA+C,IAA3CC,UAAUC,UAAUC,QAAQ,UAAkB,CAC3C,IACIC,EADW,IAAIC,KAAKL,GACCM,MAAM,WAC1BC,EAAMC,EAAOC,EAAKC,EAAMC,EAAQC,GAAUR,EAAUS,IAAIC,QAC7D,OAAO,IAAIT,KAAKE,EAAMC,EAAQ,EAAGC,EAAKC,EAAMC,EAAQC,EAC3D,CACO,OAAO,IAAIP,KAAKL,EAE9B,CACA,MAAOe,GACA,OAAO,IAAIV,KAAKL,EACvB,GAIMJ,EAAmBI,GAASA,EAAKgB,UACjCC,EAAsBA,CAACC,EAAkBC,IAAaC,YAAYF,EAAkBC,GACpF7C,EAAeA,IAAM+C,MAAe,EACpChD,EAAWiD,OAAOC,OAASD,OAAOE,IAEzCH,EAAYA,IAAwB,qBAAXC,QAA8C,qBAAbzC,SACnDT,EAAWkD,OAAOG,SAASC,KAAKC,SAAS,W","sources":["app/Components/Fullscreen/index.js","utils/display.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { detectMobile  } from \"../../../utils\";\nimport { isIframe, isFullScreen, isStudio } from \"../../../utils/display\";\nimport \"./FullScreenBtn.scss\"; \n\nconst Fullscreen = () => {\n    const [isShow, setIsShow] = useState(true);\n\n    const enableFullScreen = (event) => {\n        event.preventDefault();\n        const elem = document.documentElement;\n        if (elem.requestFullscreen) {\n            elem.requestFullscreen();\n        } else if (elem.mozRequestFullScreen) {\n            elem.mozRequestFullScreen();\n        } else if (elem.webkitRequestFullscreen) {\n            elem.webkitRequestFullscreen();\n        } else if (elem.msRequestFullscreen) {\n            elem.msRequestFullscreen();\n        }\n        setIsShow(false);\n    };\n\n    useEffect(() => {\n        const screenTimeOut = setTimeout(() => setIsShow(false), 8000);\n        return () => {\n            clearTimeout(screenTimeOut);\n        };\n    }, []);\n    return (\n        (isShow && !detectMobile() && !isStudio && !isIframe && isFullScreen()) ? (\n            <div className=\"tb_f_s_btn\" onClick={enableFullScreen}>\n                <div className=\"tb__icon tb-expand\"><div></div></div>\n                Enable Full Screen\n            </div>\n        ) : null\n    );\n};\n\nexport default Fullscreen;","\nexport const announcementsUtils = (timeStamp, showAt, endAt, every, anncKey) => {\n       try {\n              const timeInterval = getTimeFromDate(getConvertToDate(showAt)) / 1000;\n              const aEndTime = getTimeFromDate(getConvertToDate(endAt)) / 1000;\n              const repeatOnce = every !== 0\n                     ? (timeStamp - timeInterval + anncKey * 10) % (every * 60)\n                     : timeStamp - timeInterval - 23400 + anncKey * 10;\n              return { repeatOnce, timeInterval, aEndTime };\n       } catch {\n              return { repeatOnce: 0, timeInterval: 0, aEndTime: 0 };\n       }\n};\n\nexport const getConvertToDate = (date) => {\n       try {\n              if (navigator.userAgent.indexOf(\"Safari\") !== -1) {\n                     let dateData = new Date(date);\n                     let dateParts = dateData.split(/[- :T]/);\n                     let [year, month, day, hour, minute, second] = dateParts.map(Number);\n                     return new Date(year, month - 1, day, hour, minute, second);\n              } else {\n                     return new Date(date);\n              }\n       }\n       catch (ex) {\n              return new Date(date);\n       }\n}\n\n\nexport const getTimeFromDate = (date) => date.getTime();\nexport const setIntervalFunction = (intervalFunction, duration) => setInterval(intervalFunction, duration);\nexport const isFullScreen = () => isBrowser() || false;\nexport const isIframe = window.self !== window.top;\n\nconst isBrowser = () => typeof window !== 'undefined' && typeof document !== 'undefined';\nexport const isStudio = window.location.href.includes('studio=1')\n\n\n"],"names":["Fullscreen","isShow","setIsShow","useState","useEffect","screenTimeOut","setTimeout","clearTimeout","detectMobile","isStudio","isIframe","isFullScreen","_jsxs","className","onClick","event","preventDefault","elem","document","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","children","_jsx","announcementsUtils","timeStamp","showAt","endAt","every","anncKey","timeInterval","getTimeFromDate","getConvertToDate","aEndTime","repeatOnce","date","navigator","userAgent","indexOf","dateParts","Date","split","year","month","day","hour","minute","second","map","Number","ex","getTime","setIntervalFunction","intervalFunction","duration","setInterval","isBrowser","window","self","top","location","href","includes"],"sourceRoot":""}
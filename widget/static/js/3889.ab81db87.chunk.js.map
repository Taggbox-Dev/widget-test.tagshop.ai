{"version":3,"file":"static/js/3889.ab81db87.chunk.js","mappings":"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","sources":["app/Themes/ReelTheme/index.js"],"sourcesContent":["import React, { Component, memo, Suspense } from \"react\";\r\n//import { isMobile } from 'react-device-detect';\r\nimport { connect } from \"react-redux\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Autoplay, FreeMode, Mousewheel } from 'swiper/modules';\r\nimport 'swiper/css';\r\nimport 'swiper/css/autoplay';\r\nimport 'swiper/css/free-mode';\r\nimport 'swiper/css/mousewheel';\r\nimport './scss/ReelTheme.scss';\r\n//import Card from \"./Elements/Card\"; \r\nimport { isTagShop, isTagbox } from '../../../actions/api';\r\nimport { detectMobile } from \"../../../utils\";\r\nimport { nextData } from \"../../../actions/moredataAction\";\r\nconst Card = React.lazy(() => import('./Elements/Card'));\r\n\r\nclass ReelTheme extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputRefs = {};\r\n\r\n    this.state = {\r\n       loadData : false\r\n    }\r\n  }\r\n\r\n  requestData = (swiper) => {\r\n    const { appendData, ThemeInfo, ThemeStyle, preRender, hasMoreData, nextData, loaderData } = this.props;\r\n    if (swiper.progress > 0.8 && hasMoreData && !loaderData.isShowMoreLoading) { \r\n      nextData(\r\n        isTagShop ? ThemeInfo?.webId : ThemeInfo?.wallId,\r\n        Math.floor(Date.now() / 1000),\r\n        ThemeStyle?.totalPosts,\r\n        appendData.networkID,\r\n        appendData.after,\r\n        preRender,\r\n        appendData.heightEvent\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidMount() { \r\n    setTimeout(() => {\r\n      const classNameRole = document.querySelectorAll('.splide__slide');\r\n      classNameRole && classNameRole.forEach((element) => {\r\n        element.removeAttribute(\"aria-hidden\");\r\n        element.removeAttribute(\"role\");\r\n      });\r\n    }, 100);\r\n\r\n    const { postData } = this.props;\r\n    if (postData && postData.length === 1) {\r\n      const arrowLeft = document.querySelector(\".tb_rt_arrow_left__\");\r\n      const arrowRight = document.querySelector(\".tb_rt_arrow_right__\");\r\n      if (arrowLeft && arrowRight) {\r\n        arrowLeft.style.display = 'none';\r\n        arrowRight.style.display = 'none';\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const value = Object.values(this.inputRefs)[0];\r\n    const { postData, completeDataObject, onClickPopUpSlider, parentID } = this.props;\r\n    if (value && Object.values(value)[5]?.length > 0) {\r\n      const data = Object.values(value)[5];\r\n      data.forEach((item) => {\r\n        if (item.classList) {\r\n          const filterID = String(item.classList.value).split(\" \").find((fCheck) => String(fCheck).includes(\"tb_\"));\r\n          const getID = filterID?.replace(\"tb_\", \"\");\r\n          if (getID) {\r\n            const findIndex = postData.findIndex((find) => find === getID);\r\n            const clickD = document.querySelectorAll(`.tb_rt_post_container #${item.id}`);\r\n            clickD.forEach((clickDD) => {\r\n              const p_id = clickDD.getAttribute('p_id');\r\n              if (String(parentID) === String(p_id)) {\r\n                clickDD.addEventListener('click', (event) => {\r\n                  event.preventDefault();\r\n                  const itemData = completeDataObject[getID];\r\n                  onClickPopUpSlider(findIndex, itemData);\r\n                });\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  updatepost = (e)=>  this.setState({ loadData : true})\r\n  //()=> setTimeout(() => this.props.loadMoredata(), (e*1000) \r\n\r\n  render() {\r\n    const { postData, completeDataObject, clickToShowPopUp, hasMoreData, parentID, keyRender, onClickPopUpSlider, CardStyle, ThemeStyle, ProductSetting, ThemeInfo } = this.props;\r\n    const inputName = parentID;\r\n    const numberOfColumns = ThemeStyle.column.desktop;\r\n    const mobileColumn = ThemeStyle.column.mobile;\r\n    const slidePost = ThemeStyle.slide.autoSlide;\r\n    const slideDuration = ThemeStyle.slide.slideDuration;\r\n    const isSlidePerView = isTagbox && [151513].includes(ThemeInfo?.ownerId) ? 0 : 0.6;\r\n    const { loadData } = this.state\r\n\r\n    return (\r\n      <>\r\n        {parentID && (\r\n          <div className=\"tb_rt_post_container\" ref={this.sliderHeight}>\r\n            <Swiper\r\n              observer={true}\r\n              observeParents={true}\r\n              spaceBetween={0}\r\n              key={keyRender}\r\n              ref={(parentID) => (this.inputRefs[inputName] = parentID)}\r\n              style={{ width: '100%' }}\r\n              onScroll={(swiper) => { this.requestData(swiper); if(!loadData){ this.updatepost(3)}}}\r\n              onTouchMove={(swiper) => { this.requestData(swiper); if(!loadData){ this.updatepost(0) }}}\r\n              onAutoplay={(swiper) => { this.requestData(swiper); if(!loadData){ this.updatepost(3) }}}\r\n              autoHeight={true}\r\n              speed={700} // Adjust speed for slower animation\r\n              edgeSwipeDetection={true}\r\n              slidesPerView={1}\r\n              touchRatio={.5} // Reduce touch ratio for slower dragging\r\n              cssMode={detectMobile()}\r\n              passiveListeners={true}\r\n              height={'250px'}\r\n              freeMode={{ enabled: true, sticky: false, momentumBounceRatio: 1, momentumVelocityRatio: 1 }} // Adjust momentum for slower dragging\r\n              autoplay={isTagShop || isTagbox ? { delay: slidePost === 1 ? slideDuration * 1000 : 99000, disableOnInteraction: false, pauseOnMouseEnter: true } : false}\r\n              loop={!hasMoreData}\r\n              breakpoints={{\r\n                0: { slidesPerView: (mobileColumn || 1) + isSlidePerView },\r\n                480: { slidesPerView: (mobileColumn || 1) + isSlidePerView },\r\n                575: { slidesPerView: (mobileColumn || 2) + isSlidePerView },\r\n                767: { slidesPerView: (numberOfColumns || 3) + isSlidePerView },\r\n                1024: { slidesPerView: (numberOfColumns || 5) + isSlidePerView },\r\n                1400: { slidesPerView: (numberOfColumns || 6) + isSlidePerView },\r\n                1600: { slidesPerView: (numberOfColumns || 7) + isSlidePerView },\r\n              }}\r\n              mousewheel={{ forceToAxis: true, sensitivity: 1 }} // Reduce sensitivity for slower mousewheel scrolling\r\n              watchSlidesProgress={true}\r\n              modules={[Autoplay, Mousewheel, FreeMode]}\r\n              className=\"tb_rt_post_slider\"\r\n            >\r\n              {postData?.length > 0 &&\r\n                postData.map((item, index) => {\r\n                  const cardData = completeDataObject[item];\r\n                  return (isTagShop || cardData.type !== 1) ? (\r\n                    <SwiperSlide  style={{ margin: 0, padding: 0 }} key={index} p_id={parentID} className={`tb_${cardData.id}`}>\r\n                      {({ isVisible }) => (\r\n                       <Suspense>\r\n                        <Card isVisible={isVisible} Post={cardData} index={index} CardStyle={CardStyle} ThemeStyle={ThemeStyle} ProductSetting={ProductSetting} ThemeInfo={ThemeInfo} clickToShowPopUp={clickToShowPopUp} onClickPopUpSlider={onClickPopUpSlider} />\r\n                     </Suspense> \r\n                      )}\r\n                    </SwiperSlide>\r\n                  ) : null;\r\n                })}\r\n            </Swiper>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  loaderData: state.loaderData,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  nextData: (wallID, timeStamp, postCount, networkId, after, postData, heightEvent, updateInStateNow) =>\r\n    dispatch(nextData(wallID, timeStamp, postCount, networkId, after, postData, heightEvent, updateInStateNow)),\r\n});\r\n\r\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(ReelTheme));"],"names":["Card","React","ReelTheme","Component","constructor","props","super","requestData","swiper","appendData","ThemeInfo","ThemeStyle","preRender","hasMoreData","nextData","loaderData","this","progress","isShowMoreLoading","isTagShop","webId","wallId","Math","floor","Date","now","totalPosts","networkID","after","heightEvent","updatepost","e","setState","loadData","inputRefs","state","componentDidMount","setTimeout","classNameRole","document","querySelectorAll","forEach","element","removeAttribute","postData","length","arrowLeft","querySelector","arrowRight","style","display","componentDidUpdate","_Object$values$","value","Object","values","completeDataObject","onClickPopUpSlider","parentID","item","classList","filterID","String","split","find","fCheck","includes","getID","replace","findIndex","id","clickDD","p_id","getAttribute","addEventListener","event","preventDefault","itemData","render","clickToShowPopUp","keyRender","CardStyle","ProductSetting","inputName","numberOfColumns","column","desktop","mobileColumn","mobile","slidePost","slide","autoSlide","slideDuration","isSlidePerView","isTagbox","ownerId","_jsx","_Fragment","children","className","ref","sliderHeight","Swiper","observer","observeParents","spaceBetween","width","onScroll","onTouchMove","onAutoplay","autoHeight","speed","edgeSwipeDetection","slidesPerView","touchRatio","cssMode","detectMobile","passiveListeners","height","freeMode","enabled","sticky","momentumBounceRatio","momentumVelocityRatio","autoplay","delay","disableOnInteraction","pauseOnMouseEnter","loop","breakpoints","mousewheel","forceToAxis","sensitivity","watchSlidesProgress","modules","Autoplay","Mousewheel","FreeMode","map","index","cardData","type","SwiperSlide","margin","padding","_ref","isVisible","Suspense","Post","memo","connect","dispatch","wallID","timeStamp","postCount","networkId","updateInStateNow"],"sourceRoot":""}
{"version":3,"file":"static/js/8065.72a1abd0.chunk.js","mappings":"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","sources":["app/Themes/Waterfall/Exhibit/index.js"],"sourcesContent":["import React, { Component, Suspense, memo } from \"react\";\r\nimport './scss/Exhibit.scss'\r\nimport { isSocialEmbed } from \"../../../../actions/api\";\r\nimport Masonry from 'react-masonry-component';\r\nimport { getColumns, getSizeInPercent } from \"../../../../utils\";\r\nconst SwiperFalling = React.lazy(() => import(\"./Elements/SwiperFalling\"));\r\nclass Exhibit extends Component {\r\n    state = {\r\n        activeID: -1,\r\n        newPostdata: [],\r\n        postData: []\r\n    }\r\n    componentWillMount() {\r\n        this.onLoadData(this.props)\r\n    }\r\n    onLoadData = (props) => {\r\n        const { postData, containerSize, CardStyle, ThemeStyle } = props;\r\n        const responsiveColumns = Math.max((containerSize.width / (CardStyle.minimumWidth + 20)).toFixed(), 1)\r\n        const columns =  getColumns(containerSize.width, ThemeStyle.column, responsiveColumns);\r\n        \r\n        const newPostdata = Array.from({ length: columns }, () => []);\r\n        postData.forEach((post, index) => newPostdata[index % columns].push(post));\r\n        newPostdata.forEach(col => {\r\n            while (col.length < 3) {\r\n                const randomCol = newPostdata[Math.floor(Math.random() * columns)];\r\n                const randomItem = randomCol[Math.floor(Math.random() * randomCol.length)];\r\n                col.push(randomItem);\r\n            }\r\n        });\r\n        this.setState({ newPostdata, postData })\r\n    }\r\n    scrollInterval = null\r\n    componentDidMount = () => {\r\n        this.scrollInterval = setInterval(() => this.onUpdateTimeInterVal(), 3000);\r\n    };\r\n    onUpdateTimeInterVal = () => {\r\n        const { activeID } = this.state;\r\n        const { containerSize, CardStyle, ThemeStyle } = this.props;\r\n        const responsiveColumns = Math.max((containerSize.width / (CardStyle.minimumWidth + 20)).toFixed(), 1)\r\n        const columns =  getColumns(containerSize.width, ThemeStyle.column.desktop, responsiveColumns);\r\n        const nextID = (parseInt(activeID) + 1);\r\n        this.setState({ activeID: parseInt(columns) >= nextID ? nextID : 0 })\r\n    };\r\n    componentWillUnmount() {\r\n        if (this.scrollInterval) clearInterval(this.scrollInterval);\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps.postData) !== JSON.stringify(this.props.postData)) {\r\n            this.onLoadData(nextProps);\r\n            return true\r\n        }\r\n    }\r\n    render() {\r\n        const { postData, completeDataObject, CardStyle, ThemeStyle, ThemeInfo, clickToShowPopUp, onClickToCTA, postSizeInPx } = this.props;\r\n        const { activeID, newPostdata } = this.state\r\n\r\n        return <> {isSocialEmbed ? <Masonry\r\n            id=\"pixel\"\r\n            className={`tb_w_e_post_container`}\r\n            tabIndex='0'\r\n            aria-label={`There are ${(postData && postData.length > 0) ? postData.length : 0} posts in the feed`}\r\n            elementType={'div'}\r\n            options={{\r\n                transitionDuration: 0,\r\n                percentPosition: true,\r\n                itemSelector: '.tb_w_e_post_wrapper',\r\n                horizontalOrder: true,\r\n                resize: true,\r\n            }}\r\n            disableImagesLoaded={false}\r\n            updateOnEachImageLoad={false}\r\n            imagesLoadedOptions={{}}\r\n            enableResizableChildren={true}>\r\n        </Masonry>\r\n            :\r\n            <div className=\"tb_w_e_post_container\">\r\n                {\r\n                    newPostdata.map((item, index) => {\r\n                        return <SwiperFalling\r\n                                    Post={item}\r\n                                    key={`exhi_${index}_${item?.length}`}\r\n                                    pIndex={index}\r\n                                    ThemeStyle={ThemeStyle}\r\n                                    ThemeInfo={ThemeInfo}\r\n                                    CardStyle={CardStyle}\r\n                                    activeID={activeID}\r\n                                    completeDataObject={completeDataObject}\r\n                                    onClickToCTA={onClickToCTA}\r\n                                    postSizeInPx={postSizeInPx}\r\n                                    cardCount={newPostdata.length}\r\n                                    clickToShowPopUp={clickToShowPopUp}\r\n                                />\r\n                    })\r\n                }\r\n\r\n            </div>}\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default memo(Exhibit)\r\n"],"names":["SwiperFalling","React","Exhibit","Component","constructor","arguments","state","activeID","newPostdata","postData","onLoadData","props","containerSize","CardStyle","ThemeStyle","responsiveColumns","Math","max","width","minimumWidth","toFixed","columns","getColumns","column","Array","from","length","forEach","post","index","push","col","randomCol","floor","random","randomItem","this","setState","scrollInterval","componentDidMount","setInterval","onUpdateTimeInterVal","desktop","nextID","parseInt","componentWillMount","componentWillUnmount","clearInterval","componentWillReceiveProps","nextProps","JSON","stringify","render","completeDataObject","ThemeInfo","clickToShowPopUp","onClickToCTA","postSizeInPx","_jsxs","_Fragment","children","isSocialEmbed","_jsx","Masonry","id","className","tabIndex","elementType","options","transitionDuration","percentPosition","itemSelector","horizontalOrder","resize","disableImagesLoaded","updateOnEachImageLoad","imagesLoadedOptions","enableResizableChildren","map","item","Post","pIndex","cardCount","memo"],"sourceRoot":""}
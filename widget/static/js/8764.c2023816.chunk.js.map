{"version":3,"file":"static/js/8764.c2023816.chunk.js","mappings":"yNAOA,MAAMA,EAAmBA,CAACC,EAAUC,KAChC,GACS,KADDA,EACJ,CAEI,OADmBC,OAAOF,GAAUG,QAAQ,wCAAyC,GAEhF,CAGL,OAAOH,CAEf,EAGW,MAAMI,UAAmBC,EAAAA,cACpCC,WAAAA,CAAYC,GACRC,MAAMD,GAAO,KASjBE,eAAiBC,IACbC,KAAKC,SAAS,CACVC,YAAaH,GACf,EACL,KAEDI,WAAa,KACTH,KAAKC,SAAS,CACVG,OAAQJ,KAAKK,MAAMD,OACrB,EACL,KAKDE,aAAgBC,IACZ,IACI,GAAIC,EAAAA,GAAW,CACX,MAAM,OAAEC,GAAWT,KAAKK,MACxBL,KAAKC,SAAS,CACVQ,OAAQA,EAASF,EAASG,eAElC,CACJ,CACA,MAAOC,GACHC,QAAQC,IAAIF,EAChB,GAlCAX,KAAKK,MAAQ,CACTH,aAAa,EACbE,OAAO,EACPK,OAAQ,GAEZT,KAAKc,UAAYC,EAAAA,WACrB,CAaAC,oBAAAA,GACI,MAAM,OAAEP,GAAWT,KAAKK,MACpBG,EAAAA,KAAWS,EAAAA,EAAAA,IAAuBR,EAC1C,CAeAS,MAAAA,GACI,MAAM,KAAEC,EAAI,KAAEC,GAASpB,KAAKJ,OACtB,YAAEM,EAAW,MAAEE,GAAUJ,KAAKK,MAE9BgB,GADa,CAAC,EAAG,EAAG,IACGC,SAASH,EAAKI,QAAQC,IACnD,OAAOC,EAAAA,EAAAA,MAAA,OAAKC,UAAS,6BAAAC,OAA+BzB,EAAc,wBAA0B,IAAM0B,IAAK5B,KAAKc,UAAUe,SAAA,CACjHR,GACGS,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,gBAAgBK,QAAS/B,KAAKG,WAAW0B,UACpDC,EAAAA,EAAAA,KAAA,OAAKJ,UAAS,eAAAC,OAAkBvB,EAAK,iBAAuByB,UAACC,EAAAA,EAAAA,KAAA,cAE/D,IACNA,EAAAA,EAAAA,KAACE,IAAW,CACRN,UAAS,4BAAAC,OAA8BR,EAAKK,IAC5CS,IAAK7C,EAAiB+B,EAAK9B,SAAU8B,EAAKI,QAAQC,IAClD,YAAU,QACV,eAAcL,EAAKI,QAAQC,GAC3B,YAAWL,EAAKe,KAChB,eAAcd,EAAKe,KAAKX,GACxB,eAAcL,EAAKK,GACnB,eAAcL,EAAKiB,OAASjB,EAAKiB,OAAS,GAC1C,YAAW,EACXC,OAAQ,CACJC,SAAU,CACNC,MAAO,kBACPC,WAAY,CACR,aAAc,SAItBC,KAAM,CACFC,YAAY,EACZF,WAAY,CACRpC,WAQZuC,MAAM,EAENC,QAAUjC,IACDQ,EAAK0B,SAA2B,GAAhB1B,EAAK0B,UAAcC,EAAAA,EAAAA,IAAkBnC,EAAGQ,EAAKK,GAAG,EAKzEuB,UAAU,EACV3C,MAAOA,EACP4C,OAAQ,EACRC,aAAa,EACbC,QAAUvC,IAAQX,KAAKF,gBAAe,EAAK,EAC3CqD,SAAS,EACTC,OAAQ,OACRC,MAAO,OACPC,UAAWjC,EACXkC,MAAO,CAAEC,gBAAgB,OAAD7B,OAASR,EAAKsC,YAAW,KAAKC,eAAgB,QAASC,mBAAoB,SAAUC,iBAAkB,aAC/HC,WAAY7D,KAAKM,iBArDmGa,EAAK9B,SAwDrI,E","sources":["app/Components/PostPopUp/Elements/PopUpVideo.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport ReactPlayer from \"react-player\"\nimport { POPUP_VIDEO_RENEW } from '../../../../actions/themeActions'\nimport { isTagShop } from \"../../../../actions/api\";\nimport { reelPlayTimeUpdateData } from \"../../../../utils\";\n\n\nconst mediaReplaceText = (mediaUrl, networkId) => {\n    switch (networkId) {\n        case 25:\n            const soundCloud = String(mediaUrl).replace(\"https://w.soundcloud.com/player/?url=\", \"\")\n            return soundCloud\n            break;\n\n        default:\n            return mediaUrl\n            break;\n    }\n\n}\nexport default class PopUpVideo extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            videoLoaded: false,\n            muted: false,\n            played: 0\n        }\n        this.VideoWrap = React.createRef();\n    }\n\n    setVideoLoaded = event => {\n        this.setState({\n            videoLoaded: event\n        })\n    }\n\n    muteToggle = () => {\n        this.setState({\n            muted: !this.state.muted,\n        })\n    }\n    componentWillUnmount() {\n        const { played } = this.state\n        if (isTagShop) reelPlayTimeUpdateData(played)\n    }\n    onUpdateTime = (progress) => {\n        try {\n            if (isTagShop) {\n                const { played } = this.state\n                this.setState({\n                    played: played + progress.playedSeconds\n                })\n            }\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n    }\n    render() {\n        const { data, wall } = this.props\n        const { videoLoaded, muted } = this.state\n        const noMuteIcon = [7, 3, 25]\n        const muteIcon = !noMuteIcon.includes(data.network.id) ? true : false\n        return <div className={`tb_post_modal_video_holder${videoLoaded ? ' tb_post_video_loaded' : ''}`} ref={this.VideoWrap} key={data.mediaUrl} >\n            {muteIcon ?\n                <div className=\"tb_m_mute_btn\" onClick={this.muteToggle}>\n                    <div className={`tb__icon tb-${!muted ? `unmute` : `mute`}`}><div></div></div>\n                </div>\n                : ''}\n            <ReactPlayer\n                className={`tb_post_modal_video video${data.id}`}\n                url={mediaReplaceText(data.mediaUrl, data.network.id)}\n                data-type=\"video\"\n                data-network={data.network.id}\n                data-link={data.link}\n                data-wall-id={wall.Wall.id}\n                data-item-id={data.id}\n                data-feed-id={data.feedId ? data.feedId : \"\"}\n                data-load={0}\n                config={{\n                    facebook: {\n                        appId: '117029975354072',\n                        attributes: {\n                            'data-width': 'auto',\n                            // 'data-height': `${document.querySelector('.ts_rt_post_in') ? `${document.querySelector('.ts_rt_post_in').clientHeight} px` : '100%'}`\n                        }\n                    },\n                    file: {\n                        forceVideo: true,\n                        attributes: {\n                            muted,\n                            // onError: (e) => IMG_LOAD_AFTER_COMPLETE_LAYOUT_FOR_POP_UP_VIDEO(e)\n                        }\n                    }\n                    // tracks: [\n                    //     {kind: 'subtitles', src: `${CloudUrl}/media/images/subtitles.en.vtt`, srcLang: 'en', default: true},\n                    // ]\n                }}\n                loop={true}\n                //onError={(e) => { this.setVideoLoaded(false) }}\n                onError={(e) => {\n                    if (!data.stories || data.stories == 0) POPUP_VIDEO_RENEW(e, data.id)\n\n                    //this.setVideoLoaded(false)\n                }}\n                //(data.stories == 0) ? POPUP_VIDEO_RENEW(e) : null}\n                autoPlay={true}\n                muted={muted}\n                volume={1}\n                playsinline={true}\n                onReady={(e) => { this.setVideoLoaded(true) }}\n                playing={true}\n                height={'100%'}\n                width={'100%'}\n                controls={!muteIcon ? true : false}\n                style={{ backgroundImage: `url(${data.postFileNew})`, backgroundSize: 'cover', backgroundPosition: 'center', backgroundRepeat: 'no-repeat' }}\n                onProgress={this.onUpdateTime}\n            />\n        </div>\n    }\n}"],"names":["mediaReplaceText","mediaUrl","networkId","String","replace","PopUpVideo","PureComponent","constructor","props","super","setVideoLoaded","event","this","setState","videoLoaded","muteToggle","muted","state","onUpdateTime","progress","isTagShop","played","playedSeconds","e","console","log","VideoWrap","React","componentWillUnmount","reelPlayTimeUpdateData","render","data","wall","muteIcon","includes","network","id","_jsxs","className","concat","ref","children","_jsx","onClick","ReactPlayer","url","link","Wall","feedId","config","facebook","appId","attributes","file","forceVideo","loop","onError","stories","POPUP_VIDEO_RENEW","autoPlay","volume","playsinline","onReady","playing","height","width","controls","style","backgroundImage","postFileNew","backgroundSize","backgroundPosition","backgroundRepeat","onProgress"],"sourceRoot":""}
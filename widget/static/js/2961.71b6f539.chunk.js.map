{"version":3,"file":"static/js/2961.71b6f539.chunk.js","mappings":"4NAQA,MAAMA,EAAcA,CAACC,EAAOC,KACrB,IACO,OAASD,EAAQC,EAAS,KAAKC,QAAQ,EAC9C,CACA,MAAOC,GACA,OAAO,CACd,GAGP,MAAMC,UAAgBC,EAAAA,cAEfC,MAAAA,GAAU,IAADC,EACF,MAAM,KAAGC,GAASC,KAAKC,OACjB,QAAEC,EAAO,OAAEC,GAAWJ,GACtB,OAAEK,EAAM,MAAEC,EAAK,cAAEC,EAAa,KAAEC,EAAI,WAAEC,GAAeN,EAC3D,OACOO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKF,UAAW,yBAA8B,OAALL,QAAK,IAALA,GAAY,QAAPP,EAALO,EAAOQ,aAAK,IAAAf,OAAP,EAALA,EAAcgB,UAAUH,SAAEN,EAAMU,QACzEN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UACzBC,EAAAA,EAAAA,KAACI,EAAAA,EAAa,CAACC,KAAM,GAAIC,OAAQC,WAAwB,OAAbb,QAAa,IAAbA,OAAa,EAAbA,EAAec,WAAYC,MAAW,OAAJd,QAAI,IAAJA,OAAI,EAAJA,EAAMc,WAE3FZ,EAAAA,EAAAA,MAAA,OAAKC,UAAW,yBAAyBC,SAAA,CACpB,OAAbL,QAAa,IAAbA,OAAa,EAAbA,EAAec,UAAU,mBAGxCX,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CAAC,YAAuB,OAAbL,QAAa,IAAbA,OAAa,EAAbA,EAAegB,iBAAiB,oBAGpFV,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SAEdH,EAAWe,KAAI,CAACC,EAAMC,KAAUhB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EACvDC,EAAAA,EAAAA,KAACI,EAAAA,EAAa,CAACC,KAAM,GAAIC,OAAQM,EAAKN,OAAQG,MAAW,OAAJd,QAAI,IAAJA,OAAI,EAAJA,EAAMc,SAC3DT,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UAClBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAkBG,MAAO,CAAEa,MAAO,GAAGpC,EAAYkC,EAAKjC,MAAoB,OAAbe,QAAa,IAAbA,OAAa,EAAbA,EAAegB,sBAAuBX,UAACC,EAAAA,EAAAA,KAAA,eAE1HA,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SACxBa,EAAKjC,UANgD,UAAUkC,SAYrFtB,EAAOwB,KAAKC,QAAUC,EAAAA,IAAYjB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAuBoB,IAAK9B,KAAK+B,YAAYpB,UACvFC,EAAAA,EAAAA,KAAA,OAAKF,UAAW,8BAA8BN,EAAOS,MAAMC,UAAWkB,QAASA,IAAMhC,KAAKC,MAAMgC,aAAY,GAAMtB,SAAEP,EAAOW,SACzH,UAM5C,EAGP,MAMA,GAAemB,EAAAA,EAAAA,IAAQ,IANIC,IACb,CACAC,8BAA+BA,CAACC,EAAQC,EAAWC,EAAWC,EAAWC,EAAOC,EAAaC,IAAYR,GAASC,EAAAA,EAAAA,GAA8BC,EAAQC,EAAWC,EAAWC,EAAWC,EAAOC,EAAaC,IAC7MV,YAAcL,GAAWO,GAASF,EAAAA,EAAAA,IAAYL,OAG5D,CAA+CjC,E","sources":["app/ReviewHeader/Compact/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { filterPostDataAppendWebFilter } from '../../../actions/filterpostAction'\r\nimport \"./scss/Compact.scss\"\r\nimport AverageRating from \"../../Themes/Elements/AverageRating/AverageRating\";\r\nimport { isTagShop } from \"../../../actions/api\";\r\nimport { onSitePopup } from \"../../../actions/OtherActions\";\r\n\r\nconst getBarWidth = (count, total) => {\r\n       try {\r\n              return ((count / total) * 100).toFixed(2);\r\n       }\r\n       catch (e) {\r\n              return 0;\r\n       }\r\n}\r\n\r\nclass Compact extends PureComponent {\r\n\r\n       render() {\r\n              const {  wall } = this.props;\r\n              const { Reviews, SnapUp } = wall\r\n              const { button, title, reviewDetails, star, reviewList } = Reviews\r\n              return (\r\n                     <div className=\"tb_c_container\">\r\n                            <div className={`tb_c_title tb-cTBfont-${title?.style?.variant}`}>{title.text}</div>\r\n                            <div className=\"tb_c_wrapper\">\r\n                                   <div className=\"tb_c_rating\">\r\n                                          <div className=\"tb_c_rating_wrap\">\r\n                                                 <div className=\"tb_c_avg\">\r\n                                                        <div className=\"tb_c_rview_star\">\r\n                                                               <AverageRating size={20} rating={parseFloat(reviewDetails?.avgRating)} color={star?.color} />\r\n                                                        </div>\r\n                                                        <div className={`tb_c_review_total_post`}>\r\n                                                               {reviewDetails?.avgRating} out of 5\r\n                                                        </div>\r\n                                                 </div>\r\n                                                 <div className=\"tb_c_total\">Based on {reviewDetails?.totalReviewGiven} reviews</div>\r\n                                          </div>\r\n                                   </div>\r\n                                   <div className=\"tb_c_avg_st\">\r\n                                          {\r\n                                                 reviewList.map((item, index) => <div className=\"tb_c_avg_list\" key={`rating_${index}`}>\r\n                                                        <AverageRating size={16} rating={item.rating} color={star?.color} />\r\n                                                        <div className=\"tb_c_bar\">\r\n                                                               <div className=\"tb_c_bar_active\" style={{ width: `${getBarWidth(item.count, reviewDetails?.totalReviewGiven)}%` }}><div></div></div>\r\n                                                        </div>\r\n                                                        <div className=\"tb_c_rate_count\">\r\n                                                               {item.count}\r\n                                                        </div>\r\n                                                 </div>)\r\n                                          }\r\n                                   </div>\r\n                                   {\r\n                                          SnapUp.Form.status && isTagShop ? <div className=\"tb_c_banner_btn_wrap\" ref={this.dropdownRef}>\r\n                                                 <div className={`tb_c_banner_btn tb-cTBfont-${button.style.variant}`} onClick={() => this.props.onSitePopup(true)}>{button.text}</div>\r\n                                          </div> : null\r\n                                   }\r\n\r\n                            </div>\r\n                     </div>\r\n              );\r\n       }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n       return {\r\n              filterPostDataAppendWebFilter: (wallID, timeStamp, postCount, networkId, after, heightEvent, tagName) => dispatch(filterPostDataAppendWebFilter(wallID, timeStamp, postCount, networkId, after, heightEvent, tagName)),\r\n              onSitePopup: (status) => dispatch(onSitePopup(status)),\r\n       }\r\n}\r\nexport default connect(\"\", mapDispatchToProps)(Compact);"],"names":["getBarWidth","count","total","toFixed","e","Compact","PureComponent","render","_title$style","wall","this","props","Reviews","SnapUp","button","title","reviewDetails","star","reviewList","_jsxs","className","children","_jsx","style","variant","text","AverageRating","size","rating","parseFloat","avgRating","color","totalReviewGiven","map","item","index","width","Form","status","isTagShop","ref","dropdownRef","onClick","onSitePopup","connect","dispatch","filterPostDataAppendWebFilter","wallID","timeStamp","postCount","networkId","after","heightEvent","tagName"],"sourceRoot":""}
{"version":3,"file":"static/js/9575.4eca8750.chunk.js","mappings":"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","sources":["app/Components/UserComponents/ReviewHub/Components/uppyUpload.js","app/Components/UserComponents/ReviewHub/Components/Uploads.js"],"sourcesContent":["import Uppy from '@uppy/core';\nimport Transloadit from '@uppy/transloadit';\nimport { suiteTrack, isTagShop } from '../../../../../actions/api';\n\nconst uppyKey = '0701d3d7f8d94e92a65a9cba388b1d96';\nconst uppyBucket = isTagShop ? 'cloud.tagshop.ai' : 'cloud.tagbox.com';\nconst uppyAwsKey = '47ABVORKG52UYE1KB28S';\nconst uppyAwsSecret = 'pcaTfeokaz28geAAns08H3yaGbOVz6ILgTptu19v';\n\n\n\n\nclass UppyUpload {\n    constructor(beforeFileAdded, beforeUpload, limit) {\n        let uploadPath = 'media/tmpimages/';\n        let bucket = uppyBucket;\n        if (suiteTrack) {\n            uploadPath = `ugc-suite/tmp/`;\n            bucket = 'cloud.tagbox.com';\n        }\n        if (isTagShop) {\n            uploadPath = `tmp/`;\n        }\n        this.uppy = new Uppy({\n            meta: { type: 'avatar' },\n            autoProceed: true,\n            debug: true,\n            allowMultipleUploads: true,\n            restrictions: {\n                maxFileSize: 104857600,\n                maxNumberOfFiles: limit ? limit : 1,\n                minNumberOfFiles: 1,\n                allowedFileTypes: ['image/*', 'video/*']\n            },\n            onBeforeFileAdded: beforeFileAdded,\n            onBeforeUpload: beforeUpload\n        })\n\n        this.uppy.use(Transloadit, {\n            params: {\n                auth: {\n                    key: uppyKey\n                },\n                steps: {\n                    store: {\n                        robot: '/wasabi/store',\n                        bucket_region: \"us-west-1\",\n                        result: true,\n                        bucket: bucket,\n                        key: uppyAwsKey,\n                        secret: uppyAwsSecret,\n                        path: uploadPath + '${file.id}.${file.ext}'\n                    }\n                }\n            },\n            waitForEncoding: true\n            // }).use(Compressor, {\n            //     quality: 0.8\n        });\n    }\n}\n\nexport default UppyUpload;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport { DragDrop, StatusBar, FileInput, Dashboard } from '@uppy/react';\nimport '@uppy/core/dist/style.css'\nimport UppyUpload from './uppyUpload'\nimport { suiteTrack, VIDEO_COMPRESS, isTagShop } from '../../../../../actions/api'\nimport { bytesToSize, tb_onsite_btn_disabled } from '../../../../../utils'\nimport { CloudHostUrl } from '../../../../../constants'\nimport _ from \"lodash\";\n\n\nexport const Loader = ({ value, isBar }) => {\n    const progress = Math.round(3.14 * (78 / 2 - 10) * 2 * ((100 - value) / 100));\n    return isBar ?\n        <div className='t_m_pb_wrap'>\n            <div className='t_m_pb' style={{ width: `${value}%` }}><div></div></div>\n        </div>\n        :\n        <div className='t_m_propgress'>\n            <svg width=\"78\" height=\"78\" viewBox=\"-10 -10 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style={{ transform: 'rotate(-90deg)' }}>\n                <circle r=\"30\" cx=\"40\" cy=\"40\" fill=\"transparent\" stroke=\"#D9D9D9\" strokeWidth=\"4\" strokeDasharray=\"188.4px\" strokeDashoffset=\"0\"></circle>\n                <circle id='path_fr_circle' r=\"30\" cx=\"40\" cy=\"40\" stroke=\"#545454\" strokeWidth=\"4\" strokeLinecap=\"butt\" strokeDashoffset={`${progress}px`} fill=\"transparent\" strokeDasharray=\"188.4px\"></circle>\n                <text x=\"25px\" y=\"47px\" fill=\"#545454\" fontSize=\"14px\" style={{ transform: 'rotate(90deg) translate(17px, -84px)' }} textAnchor=\"middle\" dominantBaseline=\"middle\">{value}%</text>\n            </svg>\n        </div>\n}\nclass Uploads extends Component {\n    state = {\n        isLoading: false,\n        selectedFile: null,\n        selectedUrl: null,\n        type: null,\n        thumb_file: [],\n        fileSize: false,\n        filemaxSize: 0,\n        throwError: false,\n        videoPath: \"\",\n        fileSizeText: \"\",\n        ext: null, size: 0,\n        fileName: null,\n        mediaHeight: 0,\n        mediaWidth: 0,\n        uploadPercent: 0,\n        limit: 20,\n        uploadedFiles: []\n    }\n    beforeFileAdded = (currentFile, files) => {\n        tb_onsite_btn_disabled(1)\n        const { size, sizeText } = bytesToSize(currentFile.size);\n        if (['GB', 'TB'].includes(sizeText)) {\n            const fileType = currentFile.meta.type.includes('image') ? 4 : 5;\n            this.setState({ type: fileType, fileSize: true, fileSizeText: `${size}${sizeText}` }, () => {\n                this.onLoadError(fileType)\n                setTimeout(() => this.setState({ fileSize: false, fileSizeText: \"\" }), 2000)\n            })\n            tb_onsite_btn_disabled(2)\n\n        }\n        else if (sizeText == \"MB\") {\n\n            const fileType = currentFile.meta.type.includes('image') ? 4 : 5;\n            const maxuploadSize = fileType == 4 ? 15 : 100;\n\n            if (size >= maxuploadSize) {\n\n                this.setState({ type: fileType, filemaxSize: maxuploadSize, fileSize: true, fileSizeText: `${size}${sizeText}` }, () => {\n                    this.onLoadError(fileType)\n                    setTimeout(() => this.setState({ fileSize: false, fileSizeText: \"\", type: null }, () => this.onLoadError(fileType)), 5000)\n                })\n                tb_onsite_btn_disabled(2)\n\n                return false\n            }\n            else if (currentFile.meta && currentFile.meta.type.includes(\"video\")){\n                try {\n                    const { onsite_token } = this.props;\n                    this.setState({isLoading:true})\n                    const updateFiles = currentFile;\n                    const data = new FormData();\n                    data.append(\"file\", updateFiles.data);\n                    data.append(\"onsite_token\", onsite_token);\n                    const config = {\n                        headers: { productdomain: `taggbox.com` },\n                        onUploadProgress: (progressEvent) => {\n                            const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                            this.setState({\n                                uploadPercent: percent, isLoading:true\n                            })\n                            \n                            // Update Uppy progress manually\n                            \n                        }\n                    };\n                    axios.post(VIDEO_COMPRESS, data, config).then((response) => {\n                        const { responseData } = response.data;\n                        if (responseData && responseData.length > 0) {\n                            this.setState(prevState => ({\n                                videoPath: responseData[0].sscode,\n                                isLoading: false,\n                                type: 5,\n                                selectedFile: responseData[0].s3Url,\n                                selectedUrl: responseData[0].s3Url,\n                                thumb_file: responseData[0].s3ThumbUrl,\n                                ext: updateFiles.extension,\n                                size: updateFiles.size,\n                                fileName: updateFiles.name,\n                                mediaHeight: responseData[0].height,\n                                mediaWidth: responseData[0].width\n                            }), () => this.onUpdateLocalState())\n                            tb_onsite_btn_disabled(2)\n                        }\n                    }).catch((error) => {\n                        this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\n                        tb_onsite_btn_disabled(2)\n                    })\n                }\n                catch (ex) {\n                    this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\n                    this.uppyUploader.uppy.reset()\n                    tb_onsite_btn_disabled(2)\n                }\n                return false;\n                \n            }\n        }\n    }\n\n    beforeUpload = (files) => {\n        this.setState({ isLoading: true })\n        //return true\n        // const fileKeys = Object.keys(files);\n        // const { upload_image } = this.props\n        // this.setState({ isLoading: true })\n        \n        // if (fileKeys && fileKeys.length > 0 && files[fileKeys[fileKeys.length-1]] && files[fileKeys[fileKeys.length-1]].meta && files[fileKeys[fileKeys.length-1]].meta.type.includes(\"video\")) {\n        //     try {\n        //         const { onsite_token } = this.props;\n                \n        //         const updateFiles = files[fileKeys[fileKeys.length-1]];\n        //         const data = new FormData();\n        //         data.append(\"file\", updateFiles.data);\n        //         data.append(\"onsite_token\", onsite_token);\n        //         axios.post(VIDEO_COMPRESS, data, { headers: { productdomain: `taggbox.com` } }).then((response) => {\n        //             const { responseData } = response.data;\n        //             if (responseData && responseData.length > 0) {\n        //                 this.setState(prevState => ({\n        //                     videoPath: responseData[0].sscode,\n        //                     isLoading: false,\n        //                     type: 5,\n        //                     selectedFile: responseData[0].s3Url,\n        //                     selectedUrl: responseData[0].s3Url,\n        //                     thumb_file: responseData[0].s3ThumbUrl,\n        //                     ext: updateFiles.extension,\n        //                     size: updateFiles.size,\n        //                     fileName: updateFiles.name,\n        //                     mediaHeight: responseData[0].height,\n        //                     mediaWidth: responseData[0].width\n        //                 }), () => this.onUpdateLocalState())\n        //                 tb_onsite_btn_disabled(2)\n        //             }\n        //         }).catch((error) => {\n        //             this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\n        //             tb_onsite_btn_disabled(2)\n        //         })\n        //     }\n        //     catch (ex) {\n        //         this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\n        //         this.uppyUploader.uppy.reset()\n        //         tb_onsite_btn_disabled(2)\n        //     }\n        //     return false;\n        // }\n    }\n\n    uppyUploader = new UppyUpload(this.beforeFileAdded, this.beforeUpload, this.state.limit)\n\n    componentDidMount() {\n        this.uppyUploader.uppy.on('transloadit:result', (stepName, result) => {\n            this.setState({ isLoading: false })\n            const height = result.meta.orientation && result.meta.orientation == \"Rotate 90 CW\" ? result.meta.width : result.meta.height;\n            const width = result.meta.orientation && result.meta.orientation == \"Rotate 90 CW\" ? result.meta.height : result.meta.width;\n            let uploadPath = `${CloudHostUrl}media/tmpimages/`;\n            if (suiteTrack) uploadPath = `https://cloud.tagbox.com/ugc-suite/tmp/`;\n            if (isTagShop) uploadPath = `https://cloud.tagshop.ai/tmp/`;\n            this.setState(prevState=>({\n                type: result.mime.includes(\"video\") ? 5 : 4, selectedFile: result.id, selectedUrl: `${uploadPath}${result.id}.${result.ext}`, ext: result.ext, size: result.size, fileName: result.name, mediaHeight: height,\n                mediaWidth: width, uploadedFiles: [...prevState.uploadedFiles, {name:result.name, url:`${uploadPath}${result.id}.${result.ext}`}]\n            }), () => this.onUpdateLocalState())\n            tb_onsite_btn_disabled(2)\n        })\n        this.uppyUploader.uppy.on('file-removed', (file, reason) => {\n            tb_onsite_btn_disabled(2)\n        })\n        this.uppyUploader.uppy.on('upload-progress', (file, progress) => {\n            this.setState({ uploadPercent: ((progress.bytesUploaded / progress.bytesTotal) * 100).toFixed() })\n        })\n        this.uppyUploader.uppy.on('upload-error', (file, error) => {\n            this.setState({\n                throwError: true\n            })\n        });\n        this.uppyUploader.uppy.on('upload-complete', (result, error) => {\n            this.onRemovedState(true)\n        });\n    }\n    onRemovedState = (isStatus) => {\n        const { type } = this.state\n        this.setState({\n            selectedFile: null,\n            selectedUrl: null,\n            type: null,\n            thumb_file: \"\",\n            fileSize: false,\n            fileSizeText: \"\",\n            videoPath: \"\",\n            ext: null, size: 0, fileName: null, mediaHeight: 0, mediaWidth: 0\n        }, () => {\n            this.onLoadError(type)\n            if (isStatus) this.uppyUploader.uppy.reset()\n        })\n    }\n\n    onUpdateLocalState = () => {\n        const { addPostImage, isActiveIndex } = this.props;\n        const { selectedUrl, type, thumb_file, videoPath, ext, size, fileName, mediaHeight, mediaWidth, uploadedFiles } = this.state;\n        addPostImage(selectedUrl, type === 5 ? thumb_file : selectedUrl, videoPath, type, isActiveIndex, ext, size, fileName, mediaHeight, mediaWidth)\n        if (type === 5) this.onRemovedState(false)\n    }\n\n    onLoadError = (type) => {\n        const { uploadErrorCallback } = this.props\n        const { fileSize, fileSizeText, filemaxSize, throwError } = this.state\n        const error = fileSize ? `File Size (${fileSizeText}) Limit Exceeded ${type == 4 ? 'Image' : 'Video'} Size : Max ${filemaxSize} MB` : ''\n        const error2 = throwError ? 'Something went wrong , Please try again.' : ''\n        uploadErrorCallback(error ? error : error2 ? error2 : '')\n    }\n\n    componentDidUpdate(prevProps){\n        const { removedFile } = this.props\n        let {uploadedFiles} = this.state\n        if(!_.isEqual(removedFile, prevProps.removedFile)){\n            const files = this.uppyUploader.uppy.getFiles()\n            if(files.length > 0) {\n                const checkFile =  uploadedFiles.find(file => file.url == removedFile.video)\n                if(checkFile && Object.keys(checkFile).length > 0){\n                    const uppyFile = files.find(file=> file.name == checkFile.name)\n                    this.uppyUploader.uppy.removeFile(uppyFile.id)\n                    this.setState(prevState => ({ uploadedFiles: prevState.uploadedFiles.filter(file => file.url !== removedFile.video)}))\n                } \n            }\n            \n        }\n\n    }\n\n    render() {\n        const { isLoading, fileSize, throwError, fileSizeText, filemaxSize, type, uploadPercent, limit } = this.state;\n        const { upload_image } = this.props\n        return upload_image && upload_image.length < 20 ? <>\n            <div className={`t_m_upload ${upload_image && upload_image.length < 1 ? 't_m_dd' : ''}`}>\n                <div className='t_m_up_wrp'>\n                    {upload_image && upload_image.length < 1 ?\n                        <>\n                            <DragDrop\n                                note=\"Video Size : Max 100MB | Photo Size : Max 15MB | Max 20 Posts\"\n                                uppy={this.uppyUploader.uppy}\n                                inline={true}\n                                maxNumberOfFiles={limit}\n                                width={'100%'}\n                                height={'auto'}\n                                locale={{\n                                    strings: {\n                                        // Text to show on the droppable area.\n                                        // `% { browse }` is replaced with a link that opens the system file selection dialog.\n                                        dropHereOr: 'Drag a video / image to upload (optional)',\n                                        // Used as the label for the link that opens the system file selection dialog.\n                                        browse: '',\n                                    },\n                                }}\n                            />\n                            {isLoading ?\n                                <Loader value={uploadPercent} isBar={true} />\n                                : null}\n                        </>\n                        :\n                        isLoading ?\n                            <Loader value={uploadPercent} isBar={false} />\n                            :\n                            <>\n                                <FileInput\n                                    uppy={this.uppyUploader.uppy}\n                                    allowMultipleFiles={true}\n                                    locale={{\n                                        strings: {\n                                            // Text to show on the droppable area.\n                                            // `% { browse }` is replaced with a link that opens the system file selection dialog.\n                                            //dropHereOr: 'Drag a video / image to upload (optional)',\n                                            // Used as the label for the link that opens the system file selection dialog.\n                                            browse: 'browse',\n                                        },\n                                    }}\n                                />\n                                {/* <div className='t_m_p_ico'><div className={`tb__icon tb-close-thin tb-plus_icon`}><div></div></div></div> */}\n                            </>\n                    }\n                </div>\n            </div>\n        </> : null\n    }\n}\n\nexport default Uploads;"],"names":["uppyBucket","isTagShop","constructor","beforeFileAdded","beforeUpload","limit","uploadPath","bucket","suiteTrack","this","uppy","Uppy","meta","type","autoProceed","debug","allowMultipleUploads","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","onBeforeFileAdded","onBeforeUpload","use","Transloadit","params","auth","key","steps","store","robot","bucket_region","result","secret","path","waitForEncoding","Loader","_ref","value","isBar","progress","Math","round","_jsx","className","children","style","width","concat","_jsxs","height","viewBox","version","xmlns","transform","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","id","strokeLinecap","x","y","fontSize","textAnchor","dominantBaseline","Uploads","Component","arguments","state","isLoading","selectedFile","selectedUrl","thumb_file","fileSize","filemaxSize","throwError","videoPath","fileSizeText","ext","size","fileName","mediaHeight","mediaWidth","uploadPercent","uploadedFiles","currentFile","files","tb_onsite_btn_disabled","sizeText","bytesToSize","includes","fileType","setState","onLoadError","setTimeout","maxuploadSize","onsite_token","props","updateFiles","data","FormData","append","config","headers","productdomain","onUploadProgress","progressEvent","percent","loaded","total","axios","VIDEO_COMPRESS","then","response","responseData","length","prevState","sscode","s3Url","s3ThumbUrl","extension","name","onUpdateLocalState","catch","error","ex","uppyUploader","reset","UppyUpload","onRemovedState","isStatus","addPostImage","isActiveIndex","uploadErrorCallback","error2","componentDidMount","on","stepName","orientation","CloudHostUrl","mime","url","file","reason","bytesUploaded","bytesTotal","toFixed","componentDidUpdate","prevProps","removedFile","_","getFiles","checkFile","find","video","Object","keys","uppyFile","removeFile","filter","render","upload_image","_Fragment","DragDrop","note","inline","locale","strings","dropHereOr","browse","FileInput","allowMultipleFiles"],"sourceRoot":""}